{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../../../../shared/components/breadcrumb/breadcrumb.component\";\nfunction TooltipComponent_ng_template_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \"Hello, \");\n    i0.ɵɵelementStart(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"!\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.name);\n  }\n}\nfunction TooltipComponent_ng_template_96_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n    i0.ɵɵelementStart(1, \"b\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"!\");\n  }\n  if (rf & 2) {\n    const greeting_r9 = ctx.greeting;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵtextInterpolate1(\"\", greeting_r9, \", \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.name);\n  }\n}\nconst _c0 = function () {\n  return [\"Bonus UI\", \"Base\"];\n};\nexport class TooltipComponent {\n  constructor() {\n    this.name = 'World';\n  }\n  ngOnInit() {}\n  //tooltip toggle\n  toggleWithGreeting(tooltip, greeting) {\n    if (tooltip.isOpen()) {\n      tooltip.close();\n    } else {\n      tooltip.open({\n        greeting\n      });\n    }\n  }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)();\n};\nTooltipComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"app-tooltip\"]],\n  decls: 120,\n  vars: 12,\n  consts: [[3, \"title\", \"items\", \"active_item\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-sm-12\", \"col-xl-6\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\", \"btn-showcase\"], [\"type\", \"button\", \"placement\", \"top\", \"ngbTooltip\", \"Tooltip on top\", 1, \"btn\", \"btn-outline-primary\", \"me-2\"], [\"type\", \"button\", \"placement\", \"right\", \"ngbTooltip\", \"Tooltip on right\", 1, \"btn\", \"btn-outline-primary\", \"me-2\"], [\"type\", \"button\", \"placement\", \"bottom\", \"ngbTooltip\", \"Tooltip on bottom\", 1, \"btn\", \"btn-outline-primary\", \"me-2\"], [\"type\", \"button\", \"placement\", \"left\", \"ngbTooltip\", \"Tooltip on left\", 1, \"btn\", \"btn-outline-primary\"], [1, \"card-body\"], [\"tipContent\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"btn-xs-eplisis\", 3, \"ngbTooltip\"], [\"type\", \"button\", \"ngbTooltip\", \"You see, I show up on click!\", \"triggers\", \"click:blur\", 1, \"btn\", \"btn-outline-primary\"], [1, \"btn-showcase\"], [\"type\", \"button\", \"ngbTooltip\", \"What a great tip!\", \"triggers\", \"manual\", 1, \"btn\", \"btn-outline-primary\", \"me-2\", 3, \"autoClose\", \"click\"], [\"t\", \"ngbTooltip\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", 3, \"click\"], [1, \"mb-2\"], [\"type\", \"button\", \"triggers\", \"click\", \"ngbTooltip\", \"Click inside or press Escape to close\", 1, \"btn\", \"btn-outline-primary\", 3, \"autoClose\"], [\"type\", \"button\", \"triggers\", \"click\", \"ngbTooltip\", \"Click outside or press Escape to close\", 1, \"btn\", \"btn-outline-primary\", 3, \"autoClose\"], [1, \"d-inline-block\", \"btn-showcase\"], [\"type\", \"button\", \"triggers\", \"click\", \"ngbTooltip\", \"Click anywhere or press Escape to close (try the toggling element too)\", 1, \"btn\", \"btn-outline-primary\", \"me-0\", 3, \"autoClose\"], [\"tooltip3\", \"ngbTooltip\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"btn-xs-eplisis\", 3, \"click\"], [\"type\", \"button\", \"triggers\", \"manual\", 1, \"btn\", \"btn-outline-primary\", \"me-2\", 3, \"ngbTooltip\", \"click\"], [\"t1\", \"ngbTooltip\"], [\"t2\", \"ngbTooltip\"], [\"t3\", \"ngbTooltip\"], [\"type\", \"button\", \"ngbTooltip\", \"Nice class!\", \"tooltipClass\", \"my-custom-class\", 1, \"btn\", \"btn-outline-primary\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r10 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelement(0, \"app-breadcrumb\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h5\");\n      i0.ɵɵtext(7, \"Quick and easy tooltips\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"button\", 7);\n      i0.ɵɵtext(10, \" Tooltip on top \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 8);\n      i0.ɵɵtext(12, \" Tooltip on right \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 9);\n      i0.ɵɵtext(14, \" Tooltip on bottom \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 10);\n      i0.ɵɵtext(16, \" Tooltip on left \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(17, \"div\", 3)(18, \"div\", 4)(19, \"div\", 5)(20, \"h5\");\n      i0.ɵɵtext(21, \"HTML and bindings in tooltips\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"div\", 11)(23, \"p\");\n      i0.ɵɵtext(24, \" Tooltips can contain any arbitrary HTML, Angular bindings and even directives! Simply enclose desired content in a \");\n      i0.ɵɵelementStart(25, \"code\");\n      i0.ɵɵtext(26, \"<ng-template>\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(27, \" element. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(28, TooltipComponent_ng_template_28_Template, 4, 1, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(30, \"button\", 13);\n      i0.ɵɵtext(31, \" I've got markup and bindings in my tooltip! \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(32, \"div\", 3)(33, \"div\", 4)(34, \"div\", 5)(35, \"h5\");\n      i0.ɵɵtext(36, \"Custom and manual triggers\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(37, \"div\", 11)(38, \"p\");\n      i0.ɵɵtext(39, \" You can easily override open and close triggers by specifying event names (separated by \");\n      i0.ɵɵelementStart(40, \"code\");\n      i0.ɵɵtext(41, \":\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \") in the \");\n      i0.ɵɵelementStart(43, \"code\");\n      i0.ɵɵtext(44, \"triggers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(45, \" property. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"button\", 14);\n      i0.ɵɵtext(47, \" Click me! \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(48, \"hr\");\n      i0.ɵɵelementStart(49, \"p\");\n      i0.ɵɵtext(50, \" Alternatively you can take full manual control over tooltip opening / closing events. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(51, \"div\", 15)(52, \"button\", 16, 17);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_52_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r2 = i0.ɵɵreference(53);\n        return i0.ɵɵresetView(_r2.open());\n      });\n      i0.ɵɵtext(54, \" Click me to open a tooltip \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(55, \"button\", 18);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_55_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r2 = i0.ɵɵreference(53);\n        return i0.ɵɵresetView(_r2.close());\n      });\n      i0.ɵɵtext(56, \" Click me to close a tooltip \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(57, \"div\", 3)(58, \"div\", 4)(59, \"div\", 5)(60, \"h5\");\n      i0.ɵɵtext(61, \"Automatic closing with keyboard and mouse\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(62, \"div\", 11)(63, \"p\");\n      i0.ɵɵtext(64, \"As for some other popup-based widgets, you can set the tooltip to close automatically upon some events.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(65, \"p\");\n      i0.ɵɵtext(66, \"In the following examples, they will all close on \");\n      i0.ɵɵelementStart(67, \"code\");\n      i0.ɵɵtext(68, \"Escape\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(69, \" as well as:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(70, \"ul\")(71, \"li\", 19);\n      i0.ɵɵtext(72, \" click inside: \");\n      i0.ɵɵelementStart(73, \"button\", 20);\n      i0.ɵɵtext(74, \" Click to toggle \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(75, \"li\", 19);\n      i0.ɵɵtext(76, \" click outside: \");\n      i0.ɵɵelementStart(77, \"button\", 21);\n      i0.ɵɵtext(78, \" Click to toggle \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(79, \"li\", 19);\n      i0.ɵɵtext(80, \" all clicks: \");\n      i0.ɵɵelementStart(81, \"div\", 22)(82, \"button\", 23, 24);\n      i0.ɵɵtext(84, \" Click to toggle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(85, \" \\u00A0 \");\n      i0.ɵɵelementStart(86, \"button\", 25);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_86_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r3 = i0.ɵɵreference(83);\n        return i0.ɵɵresetView(_r3.toggle());\n      });\n      i0.ɵɵtext(87, \" Click to toggle the external tooltip \");\n      i0.ɵɵelementEnd()()()()()()();\n      i0.ɵɵelementStart(88, \"div\", 3)(89, \"div\", 4)(90, \"div\", 5)(91, \"h5\");\n      i0.ɵɵtext(92, \"Context and manual triggers\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(93, \"div\", 11)(94, \"p\");\n      i0.ɵɵtext(95, \" You can optionally pass in a context when manually triggering a tooltip. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(96, TooltipComponent_ng_template_96_Template, 4, 2, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(98, \"div\", 15)(99, \"button\", 26, 27);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_99_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r6 = i0.ɵɵreference(100);\n        return i0.ɵɵresetView(ctx.toggleWithGreeting(_r6, \"Bonjour\"));\n      });\n      i0.ɵɵtext(101, \" French \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(102, \"button\", 26, 28);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_102_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r7 = i0.ɵɵreference(103);\n        return i0.ɵɵresetView(ctx.toggleWithGreeting(_r7, \"Gutentag\"));\n      });\n      i0.ɵɵtext(104, \" German \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(105, \"button\", 26, 29);\n      i0.ɵɵlistener(\"click\", function TooltipComponent_Template_button_click_105_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r8 = i0.ɵɵreference(106);\n        return i0.ɵɵresetView(ctx.toggleWithGreeting(_r8, \"Hello\"));\n      });\n      i0.ɵɵtext(107, \" English \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(108, \"div\", 3)(109, \"div\", 4)(110, \"div\", 5)(111, \"h5\");\n      i0.ɵɵtext(112, \"Context and manual triggers\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(113, \"div\", 11)(114, \"p\");\n      i0.ɵɵtext(115, \" You can optionally pass in a custom class via \");\n      i0.ɵɵelementStart(116, \"code\");\n      i0.ɵɵtext(117, \"tooltipClass\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(118, \"button\", 30);\n      i0.ɵɵtext(119, \" Tooltip with custom class \");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(29);\n      i0.ɵɵproperty(\"title\", \"Tooltip\")(\"items\", i0.ɵɵpureFunction0(11, _c0))(\"active_item\", \"Tooltip\");\n      i0.ɵɵadvance(30);\n      i0.ɵɵproperty(\"ngbTooltip\", _r0);\n      i0.ɵɵadvance(22);\n      i0.ɵɵproperty(\"autoClose\", false);\n      i0.ɵɵadvance(21);\n      i0.ɵɵproperty(\"autoClose\", \"inside\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"autoClose\", \"outside\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"autoClose\", true);\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"ngbTooltip\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngbTooltip\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngbTooltip\", _r0);\n    }\n  },\n  dependencies: [i1.NgbTooltip, i2.BreadcrumbComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","TooltipComponent","constructor","ngOnInit","toggleWithGreeting","tooltip","greeting","isOpen","close","open","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["F:\\Plantillas\\template\\src\\app\\components\\bonus-ui\\base\\tooltip\\tooltip.component.html","F:\\Plantillas\\template\\src\\app\\components\\bonus-ui\\base\\tooltip\\tooltip.component.ts"],"sourcesContent":["<app-breadcrumb [title]=\"'Tooltip'\" [items]=\"['Bonus UI', 'Base']\" [active_item]=\"'Tooltip'\"></app-breadcrumb>\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>Quick and easy tooltips</h5>\n        </div>\n        <div class=\"card-body btn-showcase\">\n          <button type=\"button\" class=\"btn btn-outline-primary me-2\" placement=\"top\" ngbTooltip=\"Tooltip on top\">\n            Tooltip on top\n          </button>\n          <button type=\"button\" class=\"btn btn-outline-primary me-2\" placement=\"right\" ngbTooltip=\"Tooltip on right\">\n            Tooltip on right\n          </button>\n          <button type=\"button\" class=\"btn btn-outline-primary me-2\" placement=\"bottom\" ngbTooltip=\"Tooltip on bottom\">\n            Tooltip on bottom\n          </button>\n          <button type=\"button\" class=\"btn btn-outline-primary\" placement=\"left\" ngbTooltip=\"Tooltip on left\">\n            Tooltip on left\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>HTML and bindings in tooltips</h5>\n        </div>\n        <div class=\"card-body\">\n          <p>\n            Tooltips can contain any arbitrary HTML, Angular bindings and even directives!\n            Simply enclose desired content in a <code>&lt;ng-template&gt;</code> element.\n          </p>\n\n          <ng-template #tipContent>Hello, <b>{{name}}</b>!</ng-template>\n          <button type=\"button\" class=\"btn btn-outline-primary btn-xs-eplisis\" [ngbTooltip]=\"tipContent\">\n            I've got markup and bindings in my tooltip!\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>Custom and manual triggers</h5>\n        </div>\n        <div class=\"card-body\">\n          <p>\n            You can easily override open and close triggers by specifying event names (separated by <code>:</code>) in\n            the <code>triggers</code> property.\n          </p>\n\n          <button type=\"button\" class=\"btn btn-outline-primary\" ngbTooltip=\"You see, I show up on click!\"\n            triggers=\"click:blur\">\n            Click me!\n          </button>\n\n          <hr>\n          <p>\n            Alternatively you can take full manual control over tooltip opening / closing events.\n          </p>\n          <div class=\"btn-showcase\">\n            <button type=\"button\" class=\"btn btn-outline-primary me-2\" ngbTooltip=\"What a great tip!\"\n              [autoClose]=\"false\" triggers=\"manual\" #t=\"ngbTooltip\" (click)=\"t.open()\">\n              Click me to open a tooltip\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"t.close()\">\n              Click me to close a tooltip\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>Automatic closing with keyboard and mouse</h5>\n        </div>\n        <div class=\"card-body\">\n          <p>As for some other popup-based widgets, you can set the tooltip to close automatically upon some events.</p>\n          <p>In the following examples, they will all close on <code>Escape</code> as well as:</p>\n\n          <ul>\n            <li class=\"mb-2\">\n              click inside:\n              <button type=\"button\" class=\"btn btn-outline-primary\" triggers=\"click\" [autoClose]=\"'inside'\"\n                ngbTooltip=\"Click inside or press Escape to close\">\n                Click to toggle\n              </button>\n            </li>\n\n            <li class=\"mb-2\">\n              click outside:\n              <button type=\"button\" class=\"btn btn-outline-primary\" triggers=\"click\" [autoClose]=\"'outside'\"\n                ngbTooltip=\"Click outside or press Escape to close\">\n                Click to toggle\n              </button>\n            </li>\n\n            <li class=\"mb-2\">\n              all clicks:\n              <div class=\"d-inline-block btn-showcase\">\n                <button type=\"button\" class=\"btn btn-outline-primary me-0\" triggers=\"click\" [autoClose]=\"true\"\n                  ngbTooltip=\"Click anywhere or press Escape to close (try the toggling element too)\"\n                  #tooltip3=\"ngbTooltip\">\n                  Click to toggle\n                </button>\n\n                &nbsp;\n\n                <button type=\"button\" class=\"btn btn-outline-primary btn-xs-eplisis\" (click)=\"tooltip3.toggle()\">\n                  Click to toggle the external tooltip\n                </button>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>Context and manual triggers</h5>\n        </div>\n        <div class=\"card-body\">\n          <p>\n            You can optionally pass in a context when manually triggering a tooltip.\n          </p>\n\n          <ng-template #tipContent let-greeting=\"greeting\">{{greeting}}, <b>{{name}}</b>!</ng-template>\n          <div class=\"btn-showcase\">\n            <button type=\"button\" class=\"btn btn-outline-primary me-2\" [ngbTooltip]=\"tipContent\" triggers=\"manual\"\n              #t1=\"ngbTooltip\" (click)=\"toggleWithGreeting(t1, 'Bonjour')\">\n              French\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-primary me-2\" [ngbTooltip]=\"tipContent\" triggers=\"manual\"\n              #t2=\"ngbTooltip\" (click)=\"toggleWithGreeting(t2, 'Gutentag')\">\n              German\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-primary me-2\" [ngbTooltip]=\"tipContent\" triggers=\"manual\"\n              #t3=\"ngbTooltip\" (click)=\"toggleWithGreeting(t3, 'Hello')\">\n              English\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-sm-12 col-xl-6\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h5>Context and manual triggers</h5>\n        </div>\n        <div class=\"card-body\">\n          <p>\n            You can optionally pass in a custom class via <code>tooltipClass</code>\n          </p>\n          <button type=\"button\" class=\"btn btn-outline-primary\" ngbTooltip=\"Nice class!\" tooltipClass=\"my-custom-class\">\n            Tooltip with custom class\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TooltipComponent implements OnInit {\n  \n  name = 'World';\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  //tooltip toggle\n  toggleWithGreeting(tooltip, greeting: string) {\n    if (tooltip.isOpen()) {\n      tooltip.close();\n    } else {\n      tooltip.open({greeting});\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}