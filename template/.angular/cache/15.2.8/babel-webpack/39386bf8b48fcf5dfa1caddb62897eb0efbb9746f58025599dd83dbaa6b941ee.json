{"ast":null,"code":"\"use strict\";\n\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  };\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable_1.Observable.of(this.value);\n      case 'E':\n        return Observable_1.Observable.throw(this.error);\n      case 'C':\n        return Observable_1.Observable.empty();\n    }\n    throw new Error('unexpected notification kind value');\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\nexports.Notification = Notification;","map":{"version":3,"names":["Observable_1","require","Notification","kind","value","error","hasValue","prototype","observe","observer","next","complete","do","accept","nextOrObserver","toObservable","Observable","of","throw","empty","Error","createNext","undefinedValueNotification","createError","err","undefined","createComplete","completeNotification","exports"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/Notification.js"],"sourcesContent":["\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}