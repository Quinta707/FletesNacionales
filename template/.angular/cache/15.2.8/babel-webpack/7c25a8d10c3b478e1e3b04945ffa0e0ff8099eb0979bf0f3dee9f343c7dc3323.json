{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = function (_super) {\n  __extends(FromObservable, _super);\n  function FromObservable(ish, scheduler) {\n    _super.call(this, null);\n    this.ish = ish;\n    this.scheduler = scheduler;\n  }\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  FromObservable.create = function (ish, scheduler) {\n    if (ish != null) {\n      if (typeof ish[observable_1.observable] === 'function') {\n        if (ish instanceof Observable_1.Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable(ish, scheduler);\n      } else if (isArray_1.isArray(ish)) {\n        return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n      } else if (isPromise_1.isPromise(ish)) {\n        return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n      } else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n      } else if (isArrayLike_1.isArrayLike(ish)) {\n        return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n      }\n    }\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  };\n  /** @deprecated internal use only */\n  FromObservable.prototype._subscribe = function (subscriber) {\n    var ish = this.ish;\n    var scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[observable_1.observable]().subscribe(subscriber);\n    } else {\n      return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  };\n  return FromObservable;\n}(Observable_1.Observable);\nexports.FromObservable = FromObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isArray_1","require","isArrayLike_1","isPromise_1","PromiseObservable_1","IteratorObservable_1","ArrayObservable_1","ArrayLikeObservable_1","iterator_1","Observable_1","observeOn_1","observable_1","FromObservable","_super","ish","scheduler","call","observable","Observable","isArray","ArrayObservable","isPromise","PromiseObservable","iterator","IteratorObservable","isArrayLike","ArrayLikeObservable","TypeError","_subscribe","subscriber","subscribe","ObserveOnSubscriber","exports"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/observable/FromObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}