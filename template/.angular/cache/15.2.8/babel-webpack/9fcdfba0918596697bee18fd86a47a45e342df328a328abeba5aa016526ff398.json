{"ast":null,"code":"import { Directive, TemplateRef, EventEmitter, ContentChild, Input, Output, HostBinding, Component, forwardRef, ContentChildren, Host, Optional, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"*\"];\nconst _c1 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    \"vertical\": a0,\n    \"horizontal\": a1,\n    \"small\": a2,\n    \"large-filled\": a3,\n    \"large-filled-symbols\": a4,\n    \"large-empty\": a5,\n    \"large-empty-symbols\": a6\n  };\n};\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r0.navBarLocation == \"left\", ctx_r0.navBarLocation == \"top\", ctx_r0.navBarLayout == \"small\", ctx_r0.navBarLayout == \"large-filled\", ctx_r0.navBarLayout == \"large-filled-symbols\", ctx_r0.navBarLayout == \"large-empty\", ctx_r0.navBarLayout == \"large-empty-symbols\"));\n  }\n}\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r1.navBarLocation == \"right\", ctx_r1.navBarLocation == \"bottom\", ctx_r1.navBarLayout == \"small\", ctx_r1.navBarLayout == \"large-filled\", ctx_r1.navBarLayout == \"large-filled-symbols\", ctx_r1.navBarLayout == \"large-empty\", ctx_r1.navBarLayout == \"large-empty-symbols\"));\n  }\n}\nconst _c2 = function (a1, a2) {\n  return {\n    \"wizard-steps\": true,\n    \"vertical\": a1,\n    \"horizontal\": a2\n  };\n};\nconst _c3 = function (a0) {\n  return {\n    wizardStep: a0\n  };\n};\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n  }\n  if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.stepTitle);\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n  }\n  if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepSymbolTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n  }\n}\nfunction WizardNavigationBarComponent_li_1_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.navigationSymbol.symbol);\n  }\n}\nconst _c4 = function (a0, a1, a2, a3, a4, a5) {\n  return {\n    \"current\": a0,\n    \"editing\": a1,\n    \"done\": a2,\n    \"optional\": a3,\n    \"completed\": a4,\n    \"navigable\": a5\n  };\n};\nconst _c5 = function (a0) {\n  return {\n    \"font-family\": a0\n  };\n};\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1)(1, \"a\", 2)(2, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(6, WizardNavigationBarComponent_li_1_ng_container_6_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(7, WizardNavigationBarComponent_li_1_ng_container_7_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c4, ctx_r0.isCurrent(step_r1), ctx_r0.isEditing(step_r1), ctx_r0.isDone(step_r1), ctx_r0.isOptional(step_r1), ctx_r0.isCompleted(step_r1), ctx_r0.isNavigable(step_r1)));\n    ɵngcc0.ɵɵattribute(\"id\", step_r1.stepId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"awGoToStep\", step_r1);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(15, _c5, step_r1.stepSymbolTemplate ? \"\" : step_r1.navigationSymbol.fontFamily));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepSymbolTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepSymbolTemplate);\n  }\n}\nclass WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nWizardStepSymbolDirective.ɵfac = function WizardStepSymbolDirective_Factory(t) {\n  return new (t || WizardStepSymbolDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nWizardStepSymbolDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepSymbolDirective,\n  selectors: [[\"ng-template\", \"awStepSymbol\", \"\"], [\"ng-template\", \"awWizardStepSymbol\", \"\"]]\n});\nWizardStepSymbolDirective.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepSymbolDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nWizardStepTitleDirective.ɵfac = function WizardStepTitleDirective_Factory(t) {\n  return new (t || WizardStepTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nWizardStepTitleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepTitleDirective,\n  selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]]\n});\nWizardStepTitleDirective.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardStep {\n  constructor() {\n    /**\n     * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n     * Takes effect when `stepSymbolTemplate` is not defined or null.\n     */\n    this.navigationSymbol = {\n      symbol: ''\n    };\n    /**\n     * A boolean describing if the wizard step is currently selected\n     */\n    this.selected = false;\n    /**\n     * A boolean describing if the wizard step has been completed\n     */\n    this.completed = false;\n    /**\n     * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n     *\n     * Users will typically use `CompletedStepDirective` to set this flag\n     */\n    this.initiallyCompleted = false;\n    /**\n     * A boolean describing if the wizard step is being edited after being competed\n     *\n     * This flag can only be true when `selected` is true.\n     */\n    this.editing = false;\n    /**\n     * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n     */\n    this.defaultSelected = false;\n    /**\n     * A boolean describing if the wizard step is an optional step\n     */\n    this.optional = false;\n    /**\n     * A function or boolean deciding, if this step can be entered\n     */\n    this.canEnter = true;\n    /**\n     * A function or boolean deciding, if this step can be exited\n     */\n    this.canExit = true;\n    /**\n     * This [[EventEmitter]] is called when the step is entered.\n     * The bound method should be used to do initialization work.\n     */\n    this.stepEnter = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Returns true if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  get hidden() {\n    return !this.selected;\n  }\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  static canTransitionStep(condition, direction) {\n    if (typeof condition === typeof true) {\n      return Promise.resolve(condition);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  enter(direction) {\n    this.stepEnter.emit(direction);\n  }\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  exit(direction) {\n    this.stepExit.emit(direction);\n  }\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  canEnterStep(direction) {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  canExitStep(direction) {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\nWizardStep.ɵfac = function WizardStep_Factory(t) {\n  return new (t || WizardStep)();\n};\nWizardStep.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardStep,\n  contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepSymbolDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepSymbolTemplate = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function WizardStep_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n    }\n  },\n  inputs: {\n    navigationSymbol: \"navigationSymbol\",\n    canEnter: \"canEnter\",\n    canExit: \"canExit\",\n    stepId: \"stepId\",\n    stepTitle: \"stepTitle\"\n  },\n  outputs: {\n    stepEnter: \"stepEnter\",\n    stepExit: \"stepExit\"\n  }\n});\nWizardStep.propDecorators = {\n  stepTitleTemplate: [{\n    type: ContentChild,\n    args: [WizardStepTitleDirective]\n  }],\n  stepSymbolTemplate: [{\n    type: ContentChild,\n    args: [WizardStepSymbolDirective]\n  }],\n  stepId: [{\n    type: Input\n  }],\n  stepTitle: [{\n    type: Input\n  }],\n  navigationSymbol: [{\n    type: Input\n  }],\n  canEnter: [{\n    type: Input\n  }],\n  canExit: [{\n    type: Input\n  }],\n  stepEnter: [{\n    type: Output\n  }],\n  stepExit: [{\n    type: Output\n  }],\n  hidden: [{\n    type: HostBinding,\n    args: ['hidden']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStep, [{\n    type: Directive\n  }], function () {\n    return [];\n  }, {\n    navigationSymbol: [{\n      type: Input\n    }],\n    canEnter: [{\n      type: Input\n    }],\n    canExit: [{\n      type: Input\n    }],\n    stepEnter: [{\n      type: Output\n    }],\n    stepExit: [{\n      type: Output\n    }],\n    hidden: [{\n      type: HostBinding,\n      args: ['hidden']\n    }],\n    stepTitleTemplate: [{\n      type: ContentChild,\n      args: [WizardStepTitleDirective]\n    }],\n    stepSymbolTemplate: [{\n      type: ContentChild,\n      args: [WizardStepSymbolDirective]\n    }],\n    stepId: [{\n      type: Input\n    }],\n    stepTitle: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardCompletionStep extends WizardStep {\n  constructor() {\n    super(...arguments);\n    /**\n     * @inheritDoc\n     */\n    this.stepExit = new EventEmitter();\n    /**\n     * @inheritDoc\n     */\n    this.canExit = false;\n  }\n  /**\n   * @inheritDoc\n   */\n  enter(direction) {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n  /**\n   * @inheritDoc\n   */\n  exit(direction) {\n    // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n    this.completed = this.initiallyCompleted;\n    this.stepExit.emit(direction);\n  }\n}\nWizardCompletionStep.ɵfac = /*@__PURE__*/function () {\n  let ɵWizardCompletionStep_BaseFactory;\n  return function WizardCompletionStep_Factory(t) {\n    return (ɵWizardCompletionStep_BaseFactory || (ɵWizardCompletionStep_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep)))(t || WizardCompletionStep);\n  };\n}();\nWizardCompletionStep.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStep,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStep, [{\n    type: Directive\n  }], null, null);\n})();\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepComponent extends WizardCompletionStep {}\nWizardCompletionStepComponent.ɵfac = /*@__PURE__*/function () {\n  let ɵWizardCompletionStepComponent_BaseFactory;\n  return function WizardCompletionStepComponent_Factory(t) {\n    return (ɵWizardCompletionStepComponent_BaseFactory || (ɵWizardCompletionStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepComponent)))(t || WizardCompletionStepComponent);\n  };\n}();\nWizardCompletionStepComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: WizardCompletionStepComponent,\n  selectors: [[\"aw-wizard-completion-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(() => WizardCompletionStepComponent)\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(() => WizardCompletionStepComponent)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function WizardCompletionStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-completion-step',\n      template: \"<ng-content></ng-content>\\n\",\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepComponent)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nvar MovingDirection;\n(function (MovingDirection) {\n  /**\n   * A forward step transition\n   */\n  MovingDirection[MovingDirection[\"Forwards\"] = 0] = \"Forwards\";\n  /**\n   * A backward step transition\n   */\n  MovingDirection[MovingDirection[\"Backwards\"] = 1] = \"Backwards\";\n  /**\n   * No step transition was done\n   */\n  MovingDirection[MovingDirection[\"Stay\"] = 2] = \"Stay\";\n})(MovingDirection || (MovingDirection = {}));\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nclass BaseNavigationMode {\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * In this implementation, a destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - the destination step can be entered in the direction from the current step\n   *\n   * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  canGoToStep(wizard, destinationIndex) {\n    const hasStep = wizard.hasStep(destinationIndex);\n    const movingDirection = wizard.getMovingDirection(destinationIndex);\n    const canExitCurrentStep = previous => {\n      return previous && wizard.currentStep.canExitStep(movingDirection);\n    };\n    const canEnterDestinationStep = previous => {\n      return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n    };\n    const canTransitionToStep = previous => {\n      return previous && this.canTransitionToStep(wizard, destinationIndex);\n    };\n    return Promise.resolve(hasStep).then(canTransitionToStep)\n    // Apply user-defined checks at the end.  They can involve user interaction\n    // which is better to be avoided if navigation mode does not actually allow the transition\n    // (`canTransitionToStep` returns `false`).\n    .then(canExitCurrentStep).then(canEnterDestinationStep);\n  }\n  /**\n   * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n   *\n   * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n   * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n   * by previous/next buttons, but not using the navigation bar.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  canTransitionToStep(wizard, destinationIndex) {\n    return this.isNavigable(wizard, destinationIndex);\n  }\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(wizard, destinationIndex, preFinalize, postFinalize) {\n    this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection = wizard.getMovingDirection(destinationIndex);\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n        // leave current step\n        wizard.currentStep.completed = true;\n        wizard.currentStep.exit(movingDirection);\n        wizard.currentStep.editing = false;\n        wizard.currentStep.selected = false;\n        this.transition(wizard, destinationIndex);\n        // remember if the next step is already completed before entering it to properly set `editing` flag\n        const wasCompleted = wizard.completed || wizard.currentStep.completed;\n        // go to next step\n        wizard.currentStep.enter(movingDirection);\n        wizard.currentStep.selected = true;\n        if (wasCompleted) {\n          wizard.currentStep.editing = true;\n        }\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        wizard.currentStep.exit(MovingDirection.Stay);\n        wizard.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n  /**\n   * Transitions the wizard to the given step index.\n   *\n   * Can perform additional actions in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step\n   */\n  transition(wizard, destinationIndex) {\n    wizard.currentStepIndex = destinationIndex;\n  }\n  /**\n   * Resets the state of this wizard.\n   *\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete.\n   *\n   * @param wizard The wizard component to operate on\n   */\n  reset(wizard) {\n    this.ensureCanReset(wizard);\n    // reset the step internal state\n    wizard.wizardSteps.forEach(step => {\n      step.completed = step.initiallyCompleted;\n      step.selected = false;\n      step.editing = false;\n    });\n    // set the first step as the current step\n    wizard.currentStepIndex = wizard.defaultStepIndex;\n    wizard.currentStep.selected = true;\n    wizard.currentStep.enter(MovingDirection.Forwards);\n  }\n  /**\n   * Checks if wizard configuration allows to perform reset.\n   *\n   * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n   *\n   * Can include additional checks in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n   */\n  ensureCanReset(wizard) {\n    // the wizard doesn't contain a step with the default step index\n    if (!wizard.hasStep(wizard.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n    }\n  }\n}\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nclass ConfigurableNavigationMode extends BaseNavigationMode {\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  constructor(navigateBackward = null, navigateForward = null) {\n    super();\n    this.navigateBackward = navigateBackward;\n    this.navigateForward = navigateForward;\n    this.navigateBackward = this.navigateBackward || 'allow';\n    this.navigateForward = this.navigateForward || 'deny';\n  }\n  /**\n   * @inheritDoc\n   */\n  canTransitionToStep(wizard, destinationIndex) {\n    // if the destination step can be navigated to using the navigation bar,\n    // it should be accessible with [goToStep] as well\n    if (this.isNavigable(wizard, destinationIndex)) {\n      return true;\n    }\n    // navigation with [goToStep] is permitted if all previous steps\n    // to the destination step have been completed or are optional\n    return wizard.wizardSteps.filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex).every(step => step.completed || step.optional);\n  }\n  /**\n   * @inheritDoc\n   */\n  transition(wizard, destinationIndex) {\n    if (this.navigateForward === 'deny') {\n      // set all steps after the destination step to incomplete\n      wizard.wizardSteps.filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex).forEach(step => step.completed = false);\n    }\n    super.transition(wizard, destinationIndex);\n  }\n  /**\n   * @inheritDoc\n   */\n  isNavigable(wizard, destinationIndex) {\n    // Check if the destination step can be navigated to\n    const destinationStep = wizard.getStepAtIndex(destinationIndex);\n    if (destinationStep instanceof WizardCompletionStep) {\n      // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      const previousStepsCompleted = wizard.wizardSteps.filter((step, index) => index < destinationIndex).every(step => step.completed || step.optional || step.selected);\n      if (!previousStepsCompleted) {\n        return false;\n      }\n    }\n    // Apply navigation pocicies\n    if (destinationIndex < wizard.currentStepIndex) {\n      // If the destination step is before current, apply the `navigateBackward` policy\n      switch (this.navigateBackward) {\n        case 'allow':\n          return true;\n        case 'deny':\n          return false;\n        default:\n          throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n      }\n    } else if (destinationIndex > wizard.currentStepIndex) {\n      // If the destination step is after current, apply the `navigateForward` policy\n      switch (this.navigateForward) {\n        case 'allow':\n          return true;\n        case 'deny':\n          return false;\n        case 'visited':\n          return destinationStep.completed;\n        default:\n          throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n      }\n    } else {\n      // Re-entering the current step is not allowed\n      return false;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  ensureCanReset(wizard) {\n    super.ensureCanReset(wizard);\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n    const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n    if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n      throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n    }\n  }\n}\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardComponent {\n  /**\n   * Constructor\n   */\n  constructor() {\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n    this.navBarLocation = 'top';\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n    this.navBarLayout = 'small';\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n    this.navBarDirection = 'left-to-right';\n    this._defaultStepIndex = 0;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n    this.disableNavigationBar = false;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     *\n     * For outside access, use the [[navigation]] getter.\n     */\n    this._navigation = new ConfigurableNavigationMode();\n    /**\n     * An array representation of all wizard steps belonging to this model\n     *\n     * For outside access, use the [[wizardSteps]] getter.\n     */\n    this._wizardSteps = [];\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     *\n     * Note: Do not modify this field directly.  Instead, use navigation methods:\n     * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n     */\n    this.currentStepIndex = -1;\n  }\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n  get defaultStepIndex() {\n    // This value can be either:\n    // - the index of a wizard step with a `selected` directive, or\n    // - the default step index, set in the [[WizardComponent]]\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n  set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  get horizontalOrientation() {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  get verticalOrientation() {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit() {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n      this.updateWizardSteps(changedWizardSteps.toArray());\n    });\n    // initialize the model\n    this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n    // finally reset the whole wizard component\n    setTimeout(() => this.reset());\n  }\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  get currentStep() {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  get completed() {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  get wizardSteps() {\n    return this._wizardSteps;\n  }\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param wizardSteps The updated wizard steps\n   */\n  updateWizardSteps(wizardSteps) {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n    this._wizardSteps = wizardSteps;\n  }\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  get navigation() {\n    return this._navigation;\n  }\n  /**\n   * Updates the navigation mode for this wizard component\n   *\n   * @param navigation The updated navigation mode\n   */\n  set navigation(navigation) {\n    this._navigation = navigation;\n  }\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex) {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep() {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep() {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep() {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex) {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n    return this.wizardSteps[stepIndex];\n  }\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId) {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step) {\n    return this.wizardSteps.indexOf(step);\n  }\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep) {\n    let movingDirection;\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n    return movingDirection;\n  }\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  canGoToStep(destinationIndex) {\n    return this.navigation.canGoToStep(this, destinationIndex);\n  }\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n   * The [[canGoToStep]] method will be called automatically.\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex, preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n  }\n  /**\n   * Tries to transition the wizard to the previous step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToPreviousStep(preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n  }\n  /**\n   * Tries to transition the wizard to the next step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToNextStep(preFinalize, postFinalize) {\n    return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n  }\n  /**\n   * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  isNavigable(destinationIndex) {\n    return this.navigation.isNavigable(this, destinationIndex);\n  }\n  /**\n   * Resets the state of this wizard.\n   */\n  reset() {\n    this.navigation.reset(this);\n  }\n}\nWizardComponent.ɵfac = function WizardComponent_Factory(t) {\n  return new (t || WizardComponent)();\n};\nWizardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: WizardComponent,\n  selectors: [[\"aw-wizard\"]],\n  contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStep, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardStepsQueryList = _t);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function WizardComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n    }\n  },\n  inputs: {\n    navBarLocation: \"navBarLocation\",\n    navBarLayout: \"navBarLayout\",\n    navBarDirection: \"navBarDirection\",\n    disableNavigationBar: \"disableNavigationBar\",\n    defaultStepIndex: \"defaultStepIndex\"\n  },\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 6,\n  consts: [[3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"]],\n  template: function WizardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"left\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.navBarLocation == \"left\" || ctx.navBarLocation == \"right\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"bottom\"));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"bottom\" || ctx.navBarLocation == \"right\");\n    }\n  },\n  dependencies: function () {\n    return [ɵngcc1.NgClass, ɵngcc1.NgIf, WizardNavigationBarComponent];\n  },\n  encapsulation: 2\n});\nWizardComponent.ctorParameters = () => [];\nWizardComponent.propDecorators = {\n  wizardStepsQueryList: [{\n    type: ContentChildren,\n    args: [WizardStep, {\n      descendants: true\n    }]\n  }],\n  navBarLocation: [{\n    type: Input\n  }],\n  navBarLayout: [{\n    type: Input\n  }],\n  navBarDirection: [{\n    type: Input\n  }],\n  defaultStepIndex: [{\n    type: Input\n  }],\n  disableNavigationBar: [{\n    type: Input\n  }],\n  horizontalOrientation: [{\n    type: HostBinding,\n    args: ['class.horizontal']\n  }],\n  verticalOrientation: [{\n    type: HostBinding,\n    args: ['class.vertical']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard',\n      template: \"<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'top' || navBarLocation == 'left'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'left',\\n    'horizontal': navBarLocation == 'top',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  'vertical': navBarLocation == 'left' || navBarLocation == 'right',\\n  'horizontal': navBarLocation == 'top' || navBarLocation == 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'bottom' || navBarLocation == 'right'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'right',\\n    'horizontal': navBarLocation == 'bottom',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    navBarLocation: [{\n      type: Input\n    }],\n    navBarLayout: [{\n      type: Input\n    }],\n    navBarDirection: [{\n      type: Input\n    }],\n    disableNavigationBar: [{\n      type: Input\n    }],\n    defaultStepIndex: [{\n      type: Input\n    }],\n    horizontalOrientation: [{\n      type: HostBinding,\n      args: ['class.horizontal']\n    }],\n    verticalOrientation: [{\n      type: HostBinding,\n      args: ['class.vertical']\n    }],\n    wizardStepsQueryList: [{\n      type: ContentChildren,\n      args: [WizardStep, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardNavigationBarComponent {\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n  }\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps() {\n    switch (this.wizard.navBarDirection) {\n      case 'right-to-left':\n        return this.wizard.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizard.wizardSteps;\n    }\n  }\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps() {\n    return this.wizard.wizardSteps.length;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `current`\n   */\n  isCurrent(wizardStep) {\n    return wizardStep.selected;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `editing`\n   */\n  isEditing(wizardStep) {\n    return wizardStep.editing;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `done`\n   */\n  isDone(wizardStep) {\n    return wizardStep.completed;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `optional`\n   */\n  isOptional(wizardStep) {\n    return wizardStep.optional;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n   *\n   * The `completed` class is only applied to completion steps.\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `completed`\n   */\n  isCompleted(wizardStep) {\n    return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n  }\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  isNavigable(wizardStep) {\n    return !wizardStep.selected && !this.wizard.disableNavigationBar && this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n  }\n}\nWizardNavigationBarComponent.ɵfac = function WizardNavigationBarComponent_Factory(t) {\n  return new (t || WizardNavigationBarComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\nWizardNavigationBarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: WizardNavigationBarComponent,\n  selectors: [[\"aw-wizard-navigation-bar\"]],\n  decls: 2,\n  vars: 4,\n  consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"awGoToStep\"], [1, \"label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"step-indicator\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function WizardNavigationBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\");\n      ɵngcc0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 8, 17, \"li\", 0);\n      ɵngcc0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n    }\n  },\n  dependencies: function () {\n    return [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgStyle, GoToStepDirective];\n  },\n  encapsulation: 2\n});\nWizardNavigationBarComponent.ctorParameters = () => [{\n  type: WizardComponent\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-navigation-bar',\n      template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li [attr.id]=\\\"step.stepId\\\" *ngFor=\\\"let step of wizardSteps\\\" [ngClass]=\\\"{\\n        'current': isCurrent(step),\\n        'editing': isEditing(step),\\n        'done': isDone(step),\\n        'optional': isOptional(step),\\n        'completed': isCompleted(step),\\n        'navigable': isNavigable(step)\\n  }\\\">\\n    <a [awGoToStep]=\\\"step\\\">\\n      <div class=\\\"label\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </div>\\n      <div class=\\\"step-indicator\\\"\\n        [ngStyle]=\\\"{ 'font-family': step.stepSymbolTemplate ? '' : step.navigationSymbol.fontFamily }\\\">\\n        <ng-container *ngIf=\\\"step.stepSymbolTemplate\\\" [ngTemplateOutlet]=\\\"step.stepSymbolTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepSymbolTemplate\\\">{{step.navigationSymbol.symbol}}</ng-container>\\n      </div>\\n    </a>\\n  </li>\\n</ul>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, null);\n})();\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepComponent extends WizardStep {}\nWizardStepComponent.ɵfac = /*@__PURE__*/function () {\n  let ɵWizardStepComponent_BaseFactory;\n  return function WizardStepComponent_Factory(t) {\n    return (ɵWizardStepComponent_BaseFactory || (ɵWizardStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepComponent)))(t || WizardStepComponent);\n  };\n}();\nWizardStepComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: WizardStepComponent,\n  selectors: [[\"aw-wizard-step\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(() => WizardStepComponent)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function WizardStepComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepComponent, [{\n    type: Component,\n    args: [{\n      selector: 'aw-wizard-step',\n      template: \"<ng-content></ng-content>\\n\",\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepComponent)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass EnableBackLinksDirective {\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(completionStep) {\n    this.completionStep = completionStep;\n    /**\n     * This EventEmitter is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n    this.stepExit = new EventEmitter();\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\nEnableBackLinksDirective.ɵfac = function EnableBackLinksDirective_Factory(t) {\n  return new (t || EnableBackLinksDirective)(ɵngcc0.ɵɵdirectiveInject(WizardCompletionStep, 1));\n};\nEnableBackLinksDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: EnableBackLinksDirective,\n  selectors: [[\"\", \"awEnableBackLinks\", \"\"]],\n  outputs: {\n    stepExit: \"stepExit\"\n  }\n});\nEnableBackLinksDirective.ctorParameters = () => [{\n  type: WizardCompletionStep,\n  decorators: [{\n    type: Host\n  }]\n}];\nEnableBackLinksDirective.propDecorators = {\n  stepExit: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awEnableBackLinks]'\n    }]\n  }], function () {\n    return [{\n      type: WizardCompletionStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    stepExit: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nfunction isStepId(value) {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nfunction isStepIndex(value) {\n  return value.hasOwnProperty('stepIndex');\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nfunction isStepOffset(value) {\n  return value.hasOwnProperty('stepOffset');\n}\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass GoToStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(wizard, wizardStep) {\n    this.wizard = wizard;\n    this.wizardStep = wizardStep;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  get destinationStep() {\n    let destinationStep;\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n    return destinationStep;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  onClick() {\n    this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\nGoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) {\n  return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardStep, 8));\n};\nGoToStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: GoToStepDirective,\n  selectors: [[\"\", \"awGoToStep\", \"\"]],\n  hostBindings: function GoToStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    targetStep: [\"awGoToStep\", \"targetStep\"]\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\nGoToStepDirective.ctorParameters = () => [{\n  type: WizardComponent\n}, {\n  type: WizardStep,\n  decorators: [{\n    type: Optional\n  }]\n}];\nGoToStepDirective.propDecorators = {\n  preFinalize: [{\n    type: Output\n  }],\n  postFinalize: [{\n    type: Output\n  }],\n  targetStep: [{\n    type: Input,\n    args: ['awGoToStep']\n  }],\n  finalize: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awGoToStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }, {\n      type: WizardStep,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    targetStep: [{\n      type: Input,\n      args: ['awGoToStep']\n    }]\n  });\n})();\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass NextStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    this.preFinalize = emitter;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  onClick() {\n    this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\nNextStepDirective.ɵfac = function NextStepDirective_Factory(t) {\n  return new (t || NextStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\nNextStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NextStepDirective,\n  selectors: [[\"\", \"awNextStep\", \"\"]],\n  hostBindings: function NextStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\nNextStepDirective.ctorParameters = () => [{\n  type: WizardComponent\n}];\nNextStepDirective.propDecorators = {\n  preFinalize: [{\n    type: Output\n  }],\n  postFinalize: [{\n    type: Output\n  }],\n  finalize: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NextStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNextStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass OptionalStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n    // tslint:disable-next-line:no-input-rename\n    this.optional = true;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    this.wizardStep.optional = this.optional || this.optional === '';\n  }\n}\nOptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) {\n  return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\nOptionalStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: OptionalStepDirective,\n  selectors: [[\"\", \"awOptionalStep\", \"\"]],\n  inputs: {\n    optional: [\"awOptionalStep\", \"optional\"]\n  }\n});\nOptionalStepDirective.ctorParameters = () => [{\n  type: WizardStep,\n  decorators: [{\n    type: Host\n  }]\n}];\nOptionalStepDirective.propDecorators = {\n  optional: [{\n    type: Input,\n    args: ['awOptionalStep']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awOptionalStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    optional: [{\n      type: Input,\n      args: ['awOptionalStep']\n    }]\n  });\n})();\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass PreviousStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n     */\n    this.preFinalize = new EventEmitter();\n    /**\n     * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n     */\n    this.postFinalize = new EventEmitter();\n  }\n  /**\n   * A convenience field for `preFinalize`\n   */\n  get finalize() {\n    return this.preFinalize;\n  }\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  set finalize(emitter) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  onClick() {\n    this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\nPreviousStepDirective.ɵfac = function PreviousStepDirective_Factory(t) {\n  return new (t || PreviousStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\nPreviousStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: PreviousStepDirective,\n  selectors: [[\"\", \"awPreviousStep\", \"\"]],\n  hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    preFinalize: \"preFinalize\",\n    postFinalize: \"postFinalize\",\n    finalize: \"finalize\"\n  }\n});\nPreviousStepDirective.ctorParameters = () => [{\n  type: WizardComponent\n}];\nPreviousStepDirective.propDecorators = {\n  preFinalize: [{\n    type: Output\n  }],\n  postFinalize: [{\n    type: Output\n  }],\n  finalize: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PreviousStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awPreviousStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    preFinalize: [{\n      type: Output\n    }],\n    postFinalize: [{\n      type: Output\n    }],\n    finalize: [{\n      type: Output\n    }],\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass ResetWizardDirective {\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  constructor(wizard) {\n    this.wizard = wizard;\n    /**\n     * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n     */\n    this.finalize = new EventEmitter();\n  }\n  /**\n   * Resets the wizard\n   */\n  onClick() {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.wizard.reset();\n  }\n}\nResetWizardDirective.ɵfac = function ResetWizardDirective_Factory(t) {\n  return new (t || ResetWizardDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\nResetWizardDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: ResetWizardDirective,\n  selectors: [[\"\", \"awResetWizard\", \"\"]],\n  hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  outputs: {\n    finalize: \"finalize\"\n  }\n});\nResetWizardDirective.ctorParameters = () => [{\n  type: WizardComponent\n}];\nResetWizardDirective.propDecorators = {\n  finalize: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetWizardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awResetWizard]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    finalize: [{\n      type: Output\n    }],\n    /**\n     * Resets the wizard\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass SelectedStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    this.wizardStep.defaultSelected = true;\n  }\n}\nSelectedStepDirective.ɵfac = function SelectedStepDirective_Factory(t) {\n  return new (t || SelectedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\nSelectedStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: SelectedStepDirective,\n  selectors: [[\"\", \"awSelectedStep\", \"\"]]\n});\nSelectedStepDirective.ctorParameters = () => [{\n  type: WizardStep,\n  decorators: [{\n    type: Host\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awSelectedStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepDirective extends WizardCompletionStep {}\nWizardCompletionStepDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵWizardCompletionStepDirective_BaseFactory;\n  return function WizardCompletionStepDirective_Factory(t) {\n    return (ɵWizardCompletionStepDirective_BaseFactory || (ɵWizardCompletionStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepDirective)))(t || WizardCompletionStepDirective);\n  };\n}();\nWizardCompletionStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardCompletionStepDirective,\n  selectors: [[\"\", \"awWizardCompletionStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(() => WizardCompletionStepDirective)\n  }, {\n    provide: WizardCompletionStep,\n    useExisting: forwardRef(() => WizardCompletionStepDirective)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardCompletionStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }, {\n        provide: WizardCompletionStep,\n        useExisting: forwardRef(() => WizardCompletionStepDirective)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepDirective extends WizardStep {}\nWizardStepDirective.ɵfac = /*@__PURE__*/function () {\n  let ɵWizardStepDirective_BaseFactory;\n  return function WizardStepDirective_Factory(t) {\n    return (ɵWizardStepDirective_BaseFactory || (ɵWizardStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepDirective)))(t || WizardStepDirective);\n  };\n}();\nWizardStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: WizardStepDirective,\n  selectors: [[\"\", \"awWizardStep\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: WizardStep,\n    useExisting: forwardRef(() => WizardStepDirective)\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awWizardStep]',\n      providers: [{\n        provide: WizardStep,\n        useExisting: forwardRef(() => WizardStepDirective)\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\nclass NavigationModeDirective {\n  constructor(wizard) {\n    this.wizard = wizard;\n  }\n  ngOnChanges(changes) {\n    this.wizard.navigation = this.getNavigationMode();\n  }\n  getNavigationMode() {\n    if (this.awNavigationMode) {\n      return this.awNavigationMode;\n    }\n    return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n  }\n}\nNavigationModeDirective.ɵfac = function NavigationModeDirective_Factory(t) {\n  return new (t || NavigationModeDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent));\n};\nNavigationModeDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NavigationModeDirective,\n  selectors: [[\"\", \"awNavigationMode\", \"\"]],\n  inputs: {\n    awNavigationMode: \"awNavigationMode\",\n    navigateBackward: \"navigateBackward\",\n    navigateForward: \"navigateForward\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nNavigationModeDirective.ctorParameters = () => [{\n  type: WizardComponent\n}];\nNavigationModeDirective.propDecorators = {\n  awNavigationMode: [{\n    type: Input\n  }],\n  navigateBackward: [{\n    type: Input\n  }],\n  navigateForward: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationModeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awNavigationMode]'\n    }]\n  }], function () {\n    return [{\n      type: WizardComponent\n    }];\n  }, {\n    awNavigationMode: [{\n      type: Input\n    }],\n    navigateBackward: [{\n      type: Input\n    }],\n    navigateForward: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\n *\n * Initially completed steps are shown as completed when the wizard is presented to the user.\n *\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awCompletedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * An optional boolean condition can be specified:\n *\n * ```html\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\n *     ...\n * </aw-wizard-step>\n * ```\n */\nclass CompletedStepDirective {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\n   */\n  constructor(wizardStep) {\n    this.wizardStep = wizardStep;\n    // tslint:disable-next-line:no-input-rename\n    this.initiallyCompleted = true;\n  }\n  /**\n   * Initialization work\n   */\n  ngOnInit() {\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n    this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';\n  }\n}\nCompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) {\n  return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1));\n};\nCompletedStepDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CompletedStepDirective,\n  selectors: [[\"\", \"awCompletedStep\", \"\"]],\n  inputs: {\n    initiallyCompleted: [\"awCompletedStep\", \"initiallyCompleted\"]\n  }\n});\nCompletedStepDirective.ctorParameters = () => [{\n  type: WizardStep,\n  decorators: [{\n    type: Host\n  }]\n}];\nCompletedStepDirective.propDecorators = {\n  initiallyCompleted: [{\n    type: Input,\n    args: ['awCompletedStep']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[awCompletedStep]'\n    }]\n  }], function () {\n    return [{\n      type: WizardStep,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    initiallyCompleted: [{\n      type: Input,\n      args: ['awCompletedStep']\n    }]\n  });\n})();\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\nclass ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot() {\n    return {\n      ngModule: ArchwizardModule,\n      providers: [\n        // Nothing here yet\n      ]\n    };\n  }\n}\nArchwizardModule.ɵfac = function ArchwizardModule_Factory(t) {\n  return new (t || ArchwizardModule)();\n};\nArchwizardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ArchwizardModule\n});\nArchwizardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ArchwizardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective],\n      imports: [CommonModule],\n      exports: [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ArchwizardModule, {\n    declarations: function () {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective];\n    }\n  });\n})();\n\n// export the components\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchwizardModule, BaseNavigationMode, CompletedStepDirective, ConfigurableNavigationMode, EnableBackLinksDirective, GoToStepDirective, MovingDirection, NavigationModeDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStep, WizardCompletionStepComponent, WizardCompletionStepDirective, WizardComponent, WizardNavigationBarComponent, WizardStep, WizardStepComponent, WizardStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, isStepId, isStepIndex, isStepOffset };","map":{"version":3,"names":["Directive","TemplateRef","EventEmitter","ContentChild","Input","Output","HostBinding","Component","forwardRef","ContentChildren","Host","Optional","HostListener","NgModule","CommonModule","ɵngcc0","ɵngcc1","_c0","_c1","a0","a1","a2","a3","a4","a5","a6","WizardComponent_aw_wizard_navigation_bar_0_Template","rf","ctx","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","ɵɵpureFunction7","navBarLocation","navBarLayout","WizardComponent_aw_wizard_navigation_bar_3_Template","ctx_r1","_c2","_c3","wizardStep","WizardNavigationBarComponent_li_1_ng_container_3_Template","ɵɵelementContainer","step_r1","$implicit","stepTitleTemplate","templateRef","ɵɵpureFunction1","WizardNavigationBarComponent_li_1_ng_container_4_Template","ɵɵelementContainerStart","ɵɵtext","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate","stepTitle","WizardNavigationBarComponent_li_1_ng_container_6_Template","stepSymbolTemplate","WizardNavigationBarComponent_li_1_ng_container_7_Template","navigationSymbol","symbol","_c4","_c5","WizardNavigationBarComponent_li_1_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵpureFunction6","isCurrent","isEditing","isDone","isOptional","isCompleted","isNavigable","ɵɵattribute","stepId","fontFamily","WizardStepSymbolDirective","constructor","ɵfac","WizardStepSymbolDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","args","selector","WizardStepTitleDirective","WizardStepTitleDirective_Factory","WizardStep","selected","completed","initiallyCompleted","editing","defaultSelected","optional","canEnter","canExit","stepEnter","stepExit","hidden","canTransitionStep","condition","direction","Promise","resolve","Function","reject","Error","enter","emit","exit","canEnterStep","canExitStep","WizardStep_Factory","contentQueries","WizardStep_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","WizardStep_HostBindings","ɵɵhostProperty","inputs","outputs","propDecorators","WizardCompletionStep","arguments","ɵWizardCompletionStep_BaseFactory","WizardCompletionStep_Factory","ɵɵgetInheritedFactory","features","ɵɵInheritDefinitionFeature","WizardCompletionStepComponent","ɵWizardCompletionStepComponent_BaseFactory","WizardCompletionStepComponent_Factory","ɵcmp","ɵɵdefineComponent","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","template","WizardCompletionStepComponent_Template","ɵɵprojectionDef","ɵɵprojection","encapsulation","providers","MovingDirection","BaseNavigationMode","canGoToStep","wizard","destinationIndex","hasStep","movingDirection","getMovingDirection","canExitCurrentStep","previous","currentStep","canEnterDestinationStep","getStepAtIndex","canTransitionToStep","then","goToStep","preFinalize","postFinalize","navigationAllowed","transition","wasCompleted","Stay","currentStepIndex","reset","ensureCanReset","wizardSteps","forEach","step","defaultStepIndex","Forwards","ConfigurableNavigationMode","navigateBackward","navigateForward","filter","index","every","destinationStep","previousStepsCompleted","defaultWizardStep","defaultCompletionStep","length","WizardComponent","navBarDirection","_defaultStepIndex","disableNavigationBar","_navigation","_wizardSteps","foundDefaultStep","find","getIndexOfStep","horizontalOrientation","verticalOrientation","ngAfterContentInit","wizardStepsQueryList","changes","subscribe","changedWizardSteps","updateWizardSteps","toArray","setTimeout","indexOf","navigation","stepIndex","hasPreviousStep","hasNextStep","isLastStep","getIndexOfStepWithId","findIndex","Backwards","goToPreviousStep","goToNextStep","WizardComponent_Factory","WizardComponent_ContentQueries","WizardComponent_HostBindings","ɵɵclassProp","consts","WizardComponent_Template","ɵɵpureFunction2","dependencies","NgClass","NgIf","WizardNavigationBarComponent","descendants","slice","reverse","numberOfWizardSteps","WizardNavigationBarComponent_Factory","WizardNavigationBarComponent_Template","ɵɵclassMapInterpolate1","NgForOf","NgTemplateOutlet","NgStyle","GoToStepDirective","WizardStepComponent","ɵWizardStepComponent_BaseFactory","WizardStepComponent_Factory","WizardStepComponent_Template","EnableBackLinksDirective","completionStep","ngOnInit","EnableBackLinksDirective_Factory","decorators","isStepId","value","hasOwnProperty","isStepIndex","isStepOffset","finalize","emitter","targetStep","stepOffset","onClick","GoToStepDirective_Factory","GoToStepDirective_HostBindings","ɵɵlistener","GoToStepDirective_click_HostBindingHandler","NextStepDirective","NextStepDirective_Factory","NextStepDirective_HostBindings","NextStepDirective_click_HostBindingHandler","OptionalStepDirective","OptionalStepDirective_Factory","PreviousStepDirective","PreviousStepDirective_Factory","PreviousStepDirective_HostBindings","PreviousStepDirective_click_HostBindingHandler","ResetWizardDirective","ResetWizardDirective_Factory","ResetWizardDirective_HostBindings","ResetWizardDirective_click_HostBindingHandler","SelectedStepDirective","SelectedStepDirective_Factory","WizardCompletionStepDirective","ɵWizardCompletionStepDirective_BaseFactory","WizardCompletionStepDirective_Factory","WizardStepDirective","ɵWizardStepDirective_BaseFactory","WizardStepDirective_Factory","NavigationModeDirective","ngOnChanges","getNavigationMode","awNavigationMode","NavigationModeDirective_Factory","ɵɵNgOnChangesFeature","CompletedStepDirective","CompletedStepDirective_Factory","ArchwizardModule","forRoot","ngModule","ArchwizardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Sarai Quintanilla/Documents/GitHub/FletesNacionales/template/node_modules/angular-archwizard/__ivy_ngcc__/fesm2015/angular-archwizard.js"],"sourcesContent":["import { Directive, TemplateRef, EventEmitter, ContentChild, Input, Output, HostBinding, Component, forwardRef, ContentChildren, Host, Optional, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"*\"];\nconst _c1 = function (a0, a1, a2, a3, a4, a5, a6) { return { \"vertical\": a0, \"horizontal\": a1, \"small\": a2, \"large-filled\": a3, \"large-filled-symbols\": a4, \"large-empty\": a5, \"large-empty-symbols\": a6 }; };\nfunction WizardComponent_aw_wizard_navigation_bar_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r0.navBarLocation == \"left\", ctx_r0.navBarLocation == \"top\", ctx_r0.navBarLayout == \"small\", ctx_r0.navBarLayout == \"large-filled\", ctx_r0.navBarLayout == \"large-filled-symbols\", ctx_r0.navBarLayout == \"large-empty\", ctx_r0.navBarLayout == \"large-empty-symbols\"));\n} }\nfunction WizardComponent_aw_wizard_navigation_bar_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"aw-wizard-navigation-bar\", 1);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction7(1, _c1, ctx_r1.navBarLocation == \"right\", ctx_r1.navBarLocation == \"bottom\", ctx_r1.navBarLayout == \"small\", ctx_r1.navBarLayout == \"large-filled\", ctx_r1.navBarLayout == \"large-filled-symbols\", ctx_r1.navBarLayout == \"large-empty\", ctx_r1.navBarLayout == \"large-empty-symbols\"));\n} }\nconst _c2 = function (a1, a2) { return { \"wizard-steps\": true, \"vertical\": a1, \"horizontal\": a2 }; };\nconst _c3 = function (a0) { return { wizardStep: a0 }; };\nfunction WizardNavigationBarComponent_li_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepTitleTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.stepTitle);\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.stepSymbolTemplate.templateRef)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c3, step_r1));\n} }\nfunction WizardNavigationBarComponent_li_1_ng_container_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(step_r1.navigationSymbol.symbol);\n} }\nconst _c4 = function (a0, a1, a2, a3, a4, a5) { return { \"current\": a0, \"editing\": a1, \"done\": a2, \"optional\": a3, \"completed\": a4, \"navigable\": a5 }; };\nconst _c5 = function (a0) { return { \"font-family\": a0 }; };\nfunction WizardNavigationBarComponent_li_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 1)(1, \"a\", 2)(2, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(3, WizardNavigationBarComponent_li_1_ng_container_3_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(4, WizardNavigationBarComponent_li_1_ng_container_4_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(6, WizardNavigationBarComponent_li_1_ng_container_6_Template, 1, 4, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(7, WizardNavigationBarComponent_li_1_ng_container_7_Template, 2, 1, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction6(8, _c4, ctx_r0.isCurrent(step_r1), ctx_r0.isEditing(step_r1), ctx_r0.isDone(step_r1), ctx_r0.isOptional(step_r1), ctx_r0.isCompleted(step_r1), ctx_r0.isNavigable(step_r1)));\n    ɵngcc0.ɵɵattribute(\"id\", step_r1.stepId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"awGoToStep\", step_r1);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepTitleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(15, _c5, step_r1.stepSymbolTemplate ? \"\" : step_r1.navigationSymbol.fontFamily));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", step_r1.stepSymbolTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !step_r1.stepSymbolTemplate);\n} }\nclass WizardStepSymbolDirective {\n    /**\n     * Constructor\n     *\n     * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nWizardStepSymbolDirective.ɵfac = function WizardStepSymbolDirective_Factory(t) { return new (t || WizardStepSymbolDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nWizardStepSymbolDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepSymbolDirective, selectors: [[\"ng-template\", \"awStepSymbol\", \"\"], [\"ng-template\", \"awWizardStepSymbol\", \"\"]] });\nWizardStepSymbolDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepSymbolDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepTitleDirective {\n    /**\n     * Constructor\n     *\n     * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nWizardStepTitleDirective.ɵfac = function WizardStepTitleDirective_Factory(t) { return new (t || WizardStepTitleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nWizardStepTitleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepTitleDirective, selectors: [[\"ng-template\", \"awStepTitle\", \"\"], [\"ng-template\", \"awWizardStepTitle\", \"\"]] });\nWizardStepTitleDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepTitleDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardStep {\n    constructor() {\n        /**\n         * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n         * Takes effect when `stepSymbolTemplate` is not defined or null.\n         */\n        this.navigationSymbol = { symbol: '' };\n        /**\n         * A boolean describing if the wizard step is currently selected\n         */\n        this.selected = false;\n        /**\n         * A boolean describing if the wizard step has been completed\n         */\n        this.completed = false;\n        /**\n         * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n         *\n         * Users will typically use `CompletedStepDirective` to set this flag\n         */\n        this.initiallyCompleted = false;\n        /**\n         * A boolean describing if the wizard step is being edited after being competed\n         *\n         * This flag can only be true when `selected` is true.\n         */\n        this.editing = false;\n        /**\n         * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n         */\n        this.defaultSelected = false;\n        /**\n         * A boolean describing if the wizard step is an optional step\n         */\n        this.optional = false;\n        /**\n         * A function or boolean deciding, if this step can be entered\n         */\n        this.canEnter = true;\n        /**\n         * A function or boolean deciding, if this step can be exited\n         */\n        this.canExit = true;\n        /**\n         * This [[EventEmitter]] is called when the step is entered.\n         * The bound method should be used to do initialization work.\n         */\n        this.stepEnter = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called when the step is exited.\n         * The bound method can be used to do cleanup work.\n         */\n        this.stepExit = new EventEmitter();\n    }\n    /**\n     * Returns true if this wizard step should be visible to the user.\n     * If the step should be visible to the user false is returned, otherwise true\n     */\n    get hidden() {\n        return !this.selected;\n    }\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @param condition A condition variable, deciding if the step can be transitioned\n     * @param direction The direction in which this step should be transitioned\n     * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     */\n    static canTransitionStep(condition, direction) {\n        if (typeof (condition) === typeof (true)) {\n            return Promise.resolve(condition);\n        }\n        else if (condition instanceof Function) {\n            return Promise.resolve(condition(direction));\n        }\n        else {\n            return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n        }\n    }\n    /**\n     * A function called when the step is entered\n     *\n     * @param direction The direction in which the step is entered\n     */\n    enter(direction) {\n        this.stepEnter.emit(direction);\n    }\n    /**\n     * A function called when the step is exited\n     *\n     * @param direction The direction in which the step is exited\n     */\n    exit(direction) {\n        this.stepExit.emit(direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be entered\n     * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     */\n    canEnterStep(direction) {\n        return WizardStep.canTransitionStep(this.canEnter, direction);\n    }\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be left\n     * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     */\n    canExitStep(direction) {\n        return WizardStep.canTransitionStep(this.canExit, direction);\n    }\n}\nWizardStep.ɵfac = function WizardStep_Factory(t) { return new (t || WizardStep)(); };\nWizardStep.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStep, contentQueries: function WizardStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepTitleDirective, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStepSymbolDirective, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitleTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepSymbolTemplate = _t.first);\n    } }, hostVars: 1, hostBindings: function WizardStep_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"hidden\", ctx.hidden);\n    } }, inputs: { navigationSymbol: \"navigationSymbol\", canEnter: \"canEnter\", canExit: \"canExit\", stepId: \"stepId\", stepTitle: \"stepTitle\" }, outputs: { stepEnter: \"stepEnter\", stepExit: \"stepExit\" } });\nWizardStep.propDecorators = {\n    stepTitleTemplate: [{ type: ContentChild, args: [WizardStepTitleDirective,] }],\n    stepSymbolTemplate: [{ type: ContentChild, args: [WizardStepSymbolDirective,] }],\n    stepId: [{ type: Input }],\n    stepTitle: [{ type: Input }],\n    navigationSymbol: [{ type: Input }],\n    canEnter: [{ type: Input }],\n    canExit: [{ type: Input }],\n    stepEnter: [{ type: Output }],\n    stepExit: [{ type: Output }],\n    hidden: [{ type: HostBinding, args: ['hidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStep, [{\n        type: Directive\n    }], function () { return []; }, { navigationSymbol: [{\n            type: Input\n        }], canEnter: [{\n            type: Input\n        }], canExit: [{\n            type: Input\n        }], stepEnter: [{\n            type: Output\n        }], stepExit: [{\n            type: Output\n        }], hidden: [{\n            type: HostBinding,\n            args: ['hidden']\n        }], stepTitleTemplate: [{\n            type: ContentChild,\n            args: [WizardStepTitleDirective]\n        }], stepSymbolTemplate: [{\n            type: ContentChild,\n            args: [WizardStepSymbolDirective]\n        }], stepId: [{\n            type: Input\n        }], stepTitle: [{\n            type: Input\n        }] }); })();\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\n/* tslint:disable-next-line directive-class-suffix */\nclass WizardCompletionStep extends WizardStep {\n    constructor() {\n        super(...arguments);\n        /**\n         * @inheritDoc\n         */\n        this.stepExit = new EventEmitter();\n        /**\n         * @inheritDoc\n         */\n        this.canExit = false;\n    }\n    /**\n     * @inheritDoc\n     */\n    enter(direction) {\n        this.completed = true;\n        this.stepEnter.emit(direction);\n    }\n    /**\n     * @inheritDoc\n     */\n    exit(direction) {\n        // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n        this.completed = this.initiallyCompleted;\n        this.stepExit.emit(direction);\n    }\n}\nWizardCompletionStep.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStep_BaseFactory; return function WizardCompletionStep_Factory(t) { return (ɵWizardCompletionStep_BaseFactory || (ɵWizardCompletionStep_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStep)))(t || WizardCompletionStep); }; }();\nWizardCompletionStep.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardCompletionStep, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStep, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepComponent extends WizardCompletionStep {\n}\nWizardCompletionStepComponent.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStepComponent_BaseFactory; return function WizardCompletionStepComponent_Factory(t) { return (ɵWizardCompletionStepComponent_BaseFactory || (ɵWizardCompletionStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepComponent)))(t || WizardCompletionStepComponent); }; }();\nWizardCompletionStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardCompletionStepComponent, selectors: [[\"aw-wizard-completion-step\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent) },\n            { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function WizardCompletionStepComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-completion-step',\n                template: \"<ng-content></ng-content>\\n\",\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent) },\n                    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nvar MovingDirection;\n(function (MovingDirection) {\n    /**\n     * A forward step transition\n     */\n    MovingDirection[MovingDirection[\"Forwards\"] = 0] = \"Forwards\";\n    /**\n     * A backward step transition\n     */\n    MovingDirection[MovingDirection[\"Backwards\"] = 1] = \"Backwards\";\n    /**\n     * No step transition was done\n     */\n    MovingDirection[MovingDirection[\"Stay\"] = 2] = \"Stay\";\n})(MovingDirection || (MovingDirection = {}));\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nclass BaseNavigationMode {\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * In this implementation, a destination wizard step can be entered if:\n     * - it exists\n     * - the current step can be exited in the direction of the destination step\n     * - the destination step can be entered in the direction from the current step\n     *\n     * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n    canGoToStep(wizard, destinationIndex) {\n        const hasStep = wizard.hasStep(destinationIndex);\n        const movingDirection = wizard.getMovingDirection(destinationIndex);\n        const canExitCurrentStep = (previous) => {\n            return previous && wizard.currentStep.canExitStep(movingDirection);\n        };\n        const canEnterDestinationStep = (previous) => {\n            return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n        };\n        const canTransitionToStep = (previous) => {\n            return previous && this.canTransitionToStep(wizard, destinationIndex);\n        };\n        return Promise.resolve(hasStep)\n            .then(canTransitionToStep)\n            // Apply user-defined checks at the end.  They can involve user interaction\n            // which is better to be avoided if navigation mode does not actually allow the transition\n            // (`canTransitionToStep` returns `false`).\n            .then(canExitCurrentStep)\n            .then(canEnterDestinationStep);\n    }\n    /**\n     * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n     *\n     * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n     * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n     * by previous/next buttons, but not using the navigation bar.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination step\n     * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n     */\n    canTransitionToStep(wizard, destinationIndex) {\n        return this.isNavigable(wizard, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * When entering the destination step, the following actions are done:\n     * - the old current step is set as completed\n     * - the old current step is set as unselected\n     * - the old current step is exited\n     * - the destination step is set as selected\n     * - the destination step is entered\n     *\n     * When the destination step couldn't be entered, the following actions are done:\n     * - the current step is exited and entered in the direction `MovingDirection.Stay`\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToStep(wizard, destinationIndex, preFinalize, postFinalize) {\n        this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n            if (navigationAllowed) {\n                // the current step can be exited in the given direction\n                const movingDirection = wizard.getMovingDirection(destinationIndex);\n                /* istanbul ignore if */\n                if (preFinalize) {\n                    preFinalize.emit();\n                }\n                // leave current step\n                wizard.currentStep.completed = true;\n                wizard.currentStep.exit(movingDirection);\n                wizard.currentStep.editing = false;\n                wizard.currentStep.selected = false;\n                this.transition(wizard, destinationIndex);\n                // remember if the next step is already completed before entering it to properly set `editing` flag\n                const wasCompleted = wizard.completed || wizard.currentStep.completed;\n                // go to next step\n                wizard.currentStep.enter(movingDirection);\n                wizard.currentStep.selected = true;\n                if (wasCompleted) {\n                    wizard.currentStep.editing = true;\n                }\n                /* istanbul ignore if */\n                if (postFinalize) {\n                    postFinalize.emit();\n                }\n            }\n            else {\n                // if the current step can't be left, reenter the current step\n                wizard.currentStep.exit(MovingDirection.Stay);\n                wizard.currentStep.enter(MovingDirection.Stay);\n            }\n        });\n    }\n    /**\n     * Transitions the wizard to the given step index.\n     *\n     * Can perform additional actions in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @param destinationIndex The index of the destination wizard step\n     */\n    transition(wizard, destinationIndex) {\n        wizard.currentStepIndex = destinationIndex;\n    }\n    /**\n     * Resets the state of this wizard.\n     *\n     * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n     * In addition the whole wizard is set as incomplete.\n     *\n     * @param wizard The wizard component to operate on\n     */\n    reset(wizard) {\n        this.ensureCanReset(wizard);\n        // reset the step internal state\n        wizard.wizardSteps.forEach(step => {\n            step.completed = step.initiallyCompleted;\n            step.selected = false;\n            step.editing = false;\n        });\n        // set the first step as the current step\n        wizard.currentStepIndex = wizard.defaultStepIndex;\n        wizard.currentStep.selected = true;\n        wizard.currentStep.enter(MovingDirection.Forwards);\n    }\n    /**\n     * Checks if wizard configuration allows to perform reset.\n     *\n     * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n     *\n     * Can include additional checks in particular navigation mode implementations.\n     *\n     * @param wizard The wizard component to operate on\n     * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n     */\n    ensureCanReset(wizard) {\n        // the wizard doesn't contain a step with the default step index\n        if (!wizard.hasStep(wizard.defaultStepIndex)) {\n            throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n        }\n    }\n}\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nclass ConfigurableNavigationMode extends BaseNavigationMode {\n    /**\n     * Constructor\n     *\n     * @param navigateBackward Controls whether wizard steps before the current step are navigable\n     * @param navigateForward Controls whether wizard steps before the current step are navigable\n     */\n    constructor(navigateBackward = null, navigateForward = null) {\n        super();\n        this.navigateBackward = navigateBackward;\n        this.navigateForward = navigateForward;\n        this.navigateBackward = this.navigateBackward || 'allow';\n        this.navigateForward = this.navigateForward || 'deny';\n    }\n    /**\n     * @inheritDoc\n     */\n    canTransitionToStep(wizard, destinationIndex) {\n        // if the destination step can be navigated to using the navigation bar,\n        // it should be accessible with [goToStep] as well\n        if (this.isNavigable(wizard, destinationIndex)) {\n            return true;\n        }\n        // navigation with [goToStep] is permitted if all previous steps\n        // to the destination step have been completed or are optional\n        return wizard.wizardSteps\n            .filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex)\n            .every(step => step.completed || step.optional);\n    }\n    /**\n     * @inheritDoc\n     */\n    transition(wizard, destinationIndex) {\n        if (this.navigateForward === 'deny') {\n            // set all steps after the destination step to incomplete\n            wizard.wizardSteps\n                .filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex)\n                .forEach(step => step.completed = false);\n        }\n        super.transition(wizard, destinationIndex);\n    }\n    /**\n     * @inheritDoc\n     */\n    isNavigable(wizard, destinationIndex) {\n        // Check if the destination step can be navigated to\n        const destinationStep = wizard.getStepAtIndex(destinationIndex);\n        if (destinationStep instanceof WizardCompletionStep) {\n            // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n            const previousStepsCompleted = wizard.wizardSteps\n                .filter((step, index) => index < destinationIndex)\n                .every(step => step.completed || step.optional || step.selected);\n            if (!previousStepsCompleted) {\n                return false;\n            }\n        }\n        // Apply navigation pocicies\n        if (destinationIndex < wizard.currentStepIndex) {\n            // If the destination step is before current, apply the `navigateBackward` policy\n            switch (this.navigateBackward) {\n                case 'allow': return true;\n                case 'deny': return false;\n                default:\n                    throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n            }\n        }\n        else if (destinationIndex > wizard.currentStepIndex) {\n            // If the destination step is after current, apply the `navigateForward` policy\n            switch (this.navigateForward) {\n                case 'allow': return true;\n                case 'deny': return false;\n                case 'visited': return destinationStep.completed;\n                default:\n                    throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n            }\n        }\n        else {\n            // Re-entering the current step is not allowed\n            return false;\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    ensureCanReset(wizard) {\n        super.ensureCanReset(wizard);\n        // the default step is a completion step and the wizard contains more than one step\n        const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n        const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n        if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n            throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n        }\n    }\n}\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardComponent {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * The location of the navigation bar inside the wizard.\n         * This location can be either top, bottom, left or right\n         */\n        this.navBarLocation = 'top';\n        /**\n         * The layout of the navigation bar inside the wizard.\n         * The layout can be either small, large-filled, large-empty or large-symbols\n         */\n        this.navBarLayout = 'small';\n        /**\n         * The direction in which the steps inside the navigation bar should be shown.\n         * The direction can be either `left-to-right` or `right-to-left`\n         */\n        this.navBarDirection = 'left-to-right';\n        this._defaultStepIndex = 0;\n        /**\n         * True, if the navigation bar shouldn't be used for navigating\n         */\n        this.disableNavigationBar = false;\n        /**\n         * The navigation mode used to navigate inside the wizard\n         *\n         * For outside access, use the [[navigation]] getter.\n         */\n        this._navigation = new ConfigurableNavigationMode();\n        /**\n         * An array representation of all wizard steps belonging to this model\n         *\n         * For outside access, use the [[wizardSteps]] getter.\n         */\n        this._wizardSteps = [];\n        /**\n         * The index of the currently visible and selected step inside the wizardSteps QueryList.\n         * If this wizard contains no steps, currentStepIndex is -1\n         *\n         * Note: Do not modify this field directly.  Instead, use navigation methods:\n         * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n         */\n        this.currentStepIndex = -1;\n    }\n    /**\n     * The initially selected step, represented by its index\n     * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n     */\n    get defaultStepIndex() {\n        // This value can be either:\n        // - the index of a wizard step with a `selected` directive, or\n        // - the default step index, set in the [[WizardComponent]]\n        const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n        if (foundDefaultStep) {\n            return this.getIndexOfStep(foundDefaultStep);\n        }\n        else {\n            return this._defaultStepIndex;\n        }\n    }\n    set defaultStepIndex(defaultStepIndex) {\n        this._defaultStepIndex = defaultStepIndex;\n    }\n    /**\n     * Returns true if this wizard uses a horizontal orientation.\n     * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n     *\n     * @returns True if this wizard uses a horizontal orientation\n     */\n    get horizontalOrientation() {\n        return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n    }\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @returns True if this wizard uses a vertical orientation\n     */\n    get verticalOrientation() {\n        return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n    }\n    /**\n     * Initialization work\n     */\n    ngAfterContentInit() {\n        // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n        this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n            this.updateWizardSteps(changedWizardSteps.toArray());\n        });\n        // initialize the model\n        this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n        // finally reset the whole wizard component\n        setTimeout(() => this.reset());\n    }\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     */\n    get currentStep() {\n        if (this.hasStep(this.currentStepIndex)) {\n            return this.wizardSteps[this.currentStepIndex];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     */\n    get completed() {\n        return this.wizardSteps.every(step => step.completed || step.optional);\n    }\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n    get wizardSteps() {\n        return this._wizardSteps;\n    }\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param wizardSteps The updated wizard steps\n     */\n    updateWizardSteps(wizardSteps) {\n        // the wizard is currently not in the initialization phase\n        if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n            this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n        }\n        this._wizardSteps = wizardSteps;\n    }\n    /**\n     * The navigation mode used to navigate inside the wizard\n     */\n    get navigation() {\n        return this._navigation;\n    }\n    /**\n     * Updates the navigation mode for this wizard component\n     *\n     * @param navigation The updated navigation mode\n     */\n    set navigation(navigation) {\n        this._navigation = navigation;\n    }\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    hasStep(stepIndex) {\n        return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n    }\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns True if this wizard has a previous step before the current step\n     */\n    hasPreviousStep() {\n        return this.hasStep(this.currentStepIndex - 1);\n    }\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns True if this wizard has a next step after the current step\n     */\n    hasNextStep() {\n        return this.hasStep(this.currentStepIndex + 1);\n    }\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns True if the wizard is currently inside its last step\n     */\n    isLastStep() {\n        return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n    }\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n    getStepAtIndex(stepIndex) {\n        if (!this.hasStep(stepIndex)) {\n            throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n        }\n        return this.wizardSteps[stepIndex];\n    }\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param stepId The given step id\n     * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n    getIndexOfStepWithId(stepId) {\n        return this.wizardSteps.findIndex(step => step.stepId === stepId);\n    }\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns The found index of `step` or `-1` if the step is not included in the wizard\n     */\n    getIndexOfStep(step) {\n        return this.wizardSteps.indexOf(step);\n    }\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns The calculated [[MovingDirection]]\n     */\n    getMovingDirection(destinationStep) {\n        let movingDirection;\n        if (destinationStep > this.currentStepIndex) {\n            movingDirection = MovingDirection.Forwards;\n        }\n        else if (destinationStep < this.currentStepIndex) {\n            movingDirection = MovingDirection.Backwards;\n        }\n        else {\n            movingDirection = MovingDirection.Stay;\n        }\n        return movingDirection;\n    }\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n     */\n    canGoToStep(destinationIndex) {\n        return this.navigation.canGoToStep(this, destinationIndex);\n    }\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n     * The [[canGoToStep]] method will be called automatically.\n     *\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToStep(destinationIndex, preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the previous step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToPreviousStep(preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n    /**\n     * Tries to transition the wizard to the next step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToNextStep(preFinalize, postFinalize) {\n        return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n    /**\n     * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns True if the step can be navigated to, false otherwise\n     */\n    isNavigable(destinationIndex) {\n        return this.navigation.isNavigable(this, destinationIndex);\n    }\n    /**\n     * Resets the state of this wizard.\n     */\n    reset() {\n        this.navigation.reset(this);\n    }\n}\nWizardComponent.ɵfac = function WizardComponent_Factory(t) { return new (t || WizardComponent)(); };\nWizardComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardComponent, selectors: [[\"aw-wizard\"]], contentQueries: function WizardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, WizardStep, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardStepsQueryList = _t);\n    } }, hostVars: 4, hostBindings: function WizardComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"horizontal\", ctx.horizontalOrientation)(\"vertical\", ctx.verticalOrientation);\n    } }, inputs: { navBarLocation: \"navBarLocation\", navBarLayout: \"navBarLayout\", navBarDirection: \"navBarDirection\", disableNavigationBar: \"disableNavigationBar\", defaultStepIndex: \"defaultStepIndex\" }, ngContentSelectors: _c0, decls: 4, vars: 6, consts: [[3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"]], template: function WizardComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, WizardComponent_aw_wizard_navigation_bar_0_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, WizardComponent_aw_wizard_navigation_bar_3_Template, 1, 9, \"aw-wizard-navigation-bar\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"left\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx.navBarLocation == \"left\" || ctx.navBarLocation == \"right\", ctx.navBarLocation == \"top\" || ctx.navBarLocation == \"bottom\"));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navBarLocation == \"bottom\" || ctx.navBarLocation == \"right\");\n    } }, dependencies: function () { return [ɵngcc1.NgClass, ɵngcc1.NgIf, WizardNavigationBarComponent]; }, encapsulation: 2 });\nWizardComponent.ctorParameters = () => [];\nWizardComponent.propDecorators = {\n    wizardStepsQueryList: [{ type: ContentChildren, args: [WizardStep, { descendants: true },] }],\n    navBarLocation: [{ type: Input }],\n    navBarLayout: [{ type: Input }],\n    navBarDirection: [{ type: Input }],\n    defaultStepIndex: [{ type: Input }],\n    disableNavigationBar: [{ type: Input }],\n    horizontalOrientation: [{ type: HostBinding, args: ['class.horizontal',] }],\n    verticalOrientation: [{ type: HostBinding, args: ['class.vertical',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard',\n                template: \"<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'top' || navBarLocation == 'left'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'left',\\n    'horizontal': navBarLocation == 'top',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\\n<div [ngClass]=\\\"{\\n  'wizard-steps': true,\\n  'vertical': navBarLocation == 'left' || navBarLocation == 'right',\\n  'horizontal': navBarLocation == 'top' || navBarLocation == 'bottom'\\n}\\\">\\n  <ng-content></ng-content>\\n</div>\\n\\n<aw-wizard-navigation-bar\\n  *ngIf=\\\"navBarLocation == 'bottom' || navBarLocation == 'right'\\\"\\n  [ngClass]=\\\"{\\n    'vertical': navBarLocation == 'right',\\n    'horizontal': navBarLocation == 'bottom',\\n    'small': navBarLayout == 'small',\\n    'large-filled': navBarLayout == 'large-filled',\\n    'large-filled-symbols': navBarLayout == 'large-filled-symbols',\\n    'large-empty': navBarLayout == 'large-empty',\\n    'large-empty-symbols': navBarLayout == 'large-empty-symbols'\\n  }\\\">\\n</aw-wizard-navigation-bar>\\n\"\n            }]\n    }], function () { return []; }, { navBarLocation: [{\n            type: Input\n        }], navBarLayout: [{\n            type: Input\n        }], navBarDirection: [{\n            type: Input\n        }], disableNavigationBar: [{\n            type: Input\n        }], defaultStepIndex: [{\n            type: Input\n        }], horizontalOrientation: [{\n            type: HostBinding,\n            args: ['class.horizontal']\n        }], verticalOrientation: [{\n            type: HostBinding,\n            args: ['class.vertical']\n        }], wizardStepsQueryList: [{\n            type: ContentChildren,\n            args: [WizardStep, { descendants: true }]\n        }] }); })();\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardNavigationBarComponent {\n    /**\n     * Constructor\n     *\n     * @param wizard The state the wizard currently resides in\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n    }\n    /**\n     * Returns all [[WizardStep]]s contained in the wizard\n     *\n     * @returns An array containing all [[WizardStep]]s\n     */\n    get wizardSteps() {\n        switch (this.wizard.navBarDirection) {\n            case 'right-to-left':\n                return this.wizard.wizardSteps.slice().reverse();\n            case 'left-to-right':\n            default:\n                return this.wizard.wizardSteps;\n        }\n    }\n    /**\n     * Returns the number of wizard steps, that need to be displaced in the navigation bar\n     *\n     * @returns The number of wizard steps to be displayed\n     */\n    get numberOfWizardSteps() {\n        return this.wizard.wizardSteps.length;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `current`\n     */\n    isCurrent(wizardStep) {\n        return wizardStep.selected;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `editing`\n     */\n    isEditing(wizardStep) {\n        return wizardStep.editing;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `done`\n     */\n    isDone(wizardStep) {\n        return wizardStep.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `optional`\n     */\n    isOptional(wizardStep) {\n        return wizardStep.optional;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n     *\n     * The `completed` class is only applied to completion steps.\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as `completed`\n     */\n    isCompleted(wizardStep) {\n        return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n    }\n    /**\n     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n     * A wizard step can be navigated to if:\n     * - the step is currently not selected\n     * - the navigation bar isn't disabled\n     * - the navigation mode allows navigation to the step\n     *\n     * @param wizardStep The wizard step to be checked\n     * @returns True if the step can be marked as navigable\n     */\n    isNavigable(wizardStep) {\n        return !wizardStep.selected && !this.wizard.disableNavigationBar &&\n            this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n    }\n}\nWizardNavigationBarComponent.ɵfac = function WizardNavigationBarComponent_Factory(t) { return new (t || WizardNavigationBarComponent)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nWizardNavigationBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardNavigationBarComponent, selectors: [[\"aw-wizard-navigation-bar\"]], decls: 2, vars: 4, consts: [[3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"awGoToStep\"], [1, \"label\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"step-indicator\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function WizardNavigationBarComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\");\n        ɵngcc0.ɵɵtemplate(1, WizardNavigationBarComponent_li_1_Template, 8, 17, \"li\", 0);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMapInterpolate1(\"steps-indicator steps-\", ctx.numberOfWizardSteps, \"\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.wizardSteps);\n    } }, dependencies: function () { return [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgStyle, GoToStepDirective]; }, encapsulation: 2 });\nWizardNavigationBarComponent.ctorParameters = () => [\n    { type: WizardComponent }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardNavigationBarComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-navigation-bar',\n                template: \"<ul class=\\\"steps-indicator steps-{{numberOfWizardSteps}}\\\">\\n  <li [attr.id]=\\\"step.stepId\\\" *ngFor=\\\"let step of wizardSteps\\\" [ngClass]=\\\"{\\n        'current': isCurrent(step),\\n        'editing': isEditing(step),\\n        'done': isDone(step),\\n        'optional': isOptional(step),\\n        'completed': isCompleted(step),\\n        'navigable': isNavigable(step)\\n  }\\\">\\n    <a [awGoToStep]=\\\"step\\\">\\n      <div class=\\\"label\\\">\\n        <ng-container *ngIf=\\\"step.stepTitleTemplate\\\" [ngTemplateOutlet]=\\\"step.stepTitleTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepTitleTemplate\\\">{{step.stepTitle}}</ng-container>\\n      </div>\\n      <div class=\\\"step-indicator\\\"\\n        [ngStyle]=\\\"{ 'font-family': step.stepSymbolTemplate ? '' : step.navigationSymbol.fontFamily }\\\">\\n        <ng-container *ngIf=\\\"step.stepSymbolTemplate\\\" [ngTemplateOutlet]=\\\"step.stepSymbolTemplate.templateRef\\\"\\n          [ngTemplateOutletContext]=\\\"{wizardStep: step}\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!step.stepSymbolTemplate\\\">{{step.navigationSymbol.symbol}}</ng-container>\\n      </div>\\n    </a>\\n  </li>\\n</ul>\\n\"\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, null); })();\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepComponent extends WizardStep {\n}\nWizardStepComponent.ɵfac = /*@__PURE__*/ function () { let ɵWizardStepComponent_BaseFactory; return function WizardStepComponent_Factory(t) { return (ɵWizardStepComponent_BaseFactory || (ɵWizardStepComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepComponent)))(t || WizardStepComponent); }; }();\nWizardStepComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WizardStepComponent, selectors: [[\"aw-wizard-step\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function WizardStepComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aw-wizard-step',\n                template: \"<ng-content></ng-content>\\n\",\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass EnableBackLinksDirective {\n    /**\n     * Constructor\n     *\n     * @param completionStep The wizard completion step, which should be exitable\n     */\n    constructor(completionStep) {\n        this.completionStep = completionStep;\n        /**\n         * This EventEmitter is called when the step is exited.\n         * The bound method can be used to do cleanup work.\n         */\n        this.stepExit = new EventEmitter();\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        this.completionStep.canExit = true;\n        this.completionStep.stepExit = this.stepExit;\n    }\n}\nEnableBackLinksDirective.ɵfac = function EnableBackLinksDirective_Factory(t) { return new (t || EnableBackLinksDirective)(ɵngcc0.ɵɵdirectiveInject(WizardCompletionStep, 1)); };\nEnableBackLinksDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: EnableBackLinksDirective, selectors: [[\"\", \"awEnableBackLinks\", \"\"]], outputs: { stepExit: \"stepExit\" } });\nEnableBackLinksDirective.ctorParameters = () => [\n    { type: WizardCompletionStep, decorators: [{ type: Host }] }\n];\nEnableBackLinksDirective.propDecorators = {\n    stepExit: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(EnableBackLinksDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awEnableBackLinks]'\n            }]\n    }], function () { return [{ type: WizardCompletionStep, decorators: [{\n                type: Host\n            }] }]; }, { stepExit: [{\n            type: Output\n        }] }); })();\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nfunction isStepId(value) {\n    return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nfunction isStepIndex(value) {\n    return value.hasOwnProperty('stepIndex');\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nfunction isStepOffset(value) {\n    return value.hasOwnProperty('stepOffset');\n}\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass GoToStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The wizard component\n     * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n     */\n    constructor(wizard, wizardStep) {\n        this.wizard = wizard;\n        this.wizardStep = wizardStep;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        /* istanbul ignore next */\n        this.preFinalize = emitter;\n    }\n    /**\n     * Returns the destination step of this directive as an absolute step index inside the wizard\n     *\n     * @returns The index of the destination step\n     * @throws If `targetStep` is of an unknown type an `Error` is thrown\n     */\n    get destinationStep() {\n        let destinationStep;\n        if (isStepIndex(this.targetStep)) {\n            destinationStep = this.targetStep.stepIndex;\n        }\n        else if (isStepId(this.targetStep)) {\n            destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n        }\n        else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n            destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n        }\n        else if (this.targetStep instanceof WizardStep) {\n            destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n        }\n        else {\n            throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n        }\n        return destinationStep;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    onClick() {\n        this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n    }\n}\nGoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) { return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent), ɵngcc0.ɵɵdirectiveInject(WizardStep, 8)); };\nGoToStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: GoToStepDirective, selectors: [[\"\", \"awGoToStep\", \"\"]], hostBindings: function GoToStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function GoToStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, inputs: { targetStep: [\"awGoToStep\", \"targetStep\"] }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nGoToStepDirective.ctorParameters = () => [\n    { type: WizardComponent },\n    { type: WizardStep, decorators: [{ type: Optional }] }\n];\nGoToStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    targetStep: [{ type: Input, args: ['awGoToStep',] }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awGoToStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }, { type: WizardStep, decorators: [{\n                type: Optional\n            }] }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the `destinationStep`\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }], targetStep: [{\n            type: Input,\n            args: ['awGoToStep']\n        }] }); })();\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass NextStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The state of the wizard\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience name for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        this.preFinalize = emitter;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    onClick() {\n        this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n    }\n}\nNextStepDirective.ɵfac = function NextStepDirective_Factory(t) { return new (t || NextStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nNextStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NextStepDirective, selectors: [[\"\", \"awNextStep\", \"\"]], hostBindings: function NextStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NextStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nNextStepDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nNextStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NextStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awNextStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the next step\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass OptionalStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n        // tslint:disable-next-line:no-input-rename\n        this.optional = true;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n        this.wizardStep.optional = this.optional || this.optional === '';\n    }\n}\nOptionalStepDirective.ɵfac = function OptionalStepDirective_Factory(t) { return new (t || OptionalStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nOptionalStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: OptionalStepDirective, selectors: [[\"\", \"awOptionalStep\", \"\"]], inputs: { optional: [\"awOptionalStep\", \"optional\"] } });\nOptionalStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\nOptionalStepDirective.propDecorators = {\n    optional: [{ type: Input, args: ['awOptionalStep',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionalStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awOptionalStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, { optional: [{\n            type: Input,\n            args: ['awOptionalStep']\n        }] }); })();\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass PreviousStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The state of the wizard\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n         */\n        this.preFinalize = new EventEmitter();\n        /**\n         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n         */\n        this.postFinalize = new EventEmitter();\n    }\n    /**\n     * A convenience field for `preFinalize`\n     */\n    get finalize() {\n        return this.preFinalize;\n    }\n    /**\n     * A convenience field for `preFinalize`\n     *\n     * @param emitter The [[EventEmitter]] to be set\n     */\n    set finalize(emitter) {\n        /* istanbul ignore next */\n        this.preFinalize = emitter;\n    }\n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    onClick() {\n        this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n    }\n}\nPreviousStepDirective.ɵfac = function PreviousStepDirective_Factory(t) { return new (t || PreviousStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nPreviousStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: PreviousStepDirective, selectors: [[\"\", \"awPreviousStep\", \"\"]], hostBindings: function PreviousStepDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function PreviousStepDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { preFinalize: \"preFinalize\", postFinalize: \"postFinalize\", finalize: \"finalize\" } });\nPreviousStepDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nPreviousStepDirective.propDecorators = {\n    preFinalize: [{ type: Output }],\n    postFinalize: [{ type: Output }],\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PreviousStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awPreviousStep]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { preFinalize: [{\n            type: Output\n        }], postFinalize: [{\n            type: Output\n        }], finalize: [{\n            type: Output\n        }], \n    /**\n     * Listener method for `click` events on the component with this directive.\n     * After this method is called the wizard will try to transition to the previous step\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\nclass ResetWizardDirective {\n    /**\n     * Constructor\n     *\n     * @param wizard The wizard component\n     */\n    constructor(wizard) {\n        this.wizard = wizard;\n        /**\n         * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n         */\n        this.finalize = new EventEmitter();\n    }\n    /**\n     * Resets the wizard\n     */\n    onClick() {\n        // do some optional cleanup work\n        this.finalize.emit();\n        // reset the wizard to its initial state\n        this.wizard.reset();\n    }\n}\nResetWizardDirective.ɵfac = function ResetWizardDirective_Factory(t) { return new (t || ResetWizardDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nResetWizardDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ResetWizardDirective, selectors: [[\"\", \"awResetWizard\", \"\"]], hostBindings: function ResetWizardDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ResetWizardDirective_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, outputs: { finalize: \"finalize\" } });\nResetWizardDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nResetWizardDirective.propDecorators = {\n    finalize: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetWizardDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awResetWizard]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { finalize: [{\n            type: Output\n        }], \n    /**\n     * Resets the wizard\n     */\n    onClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\nclass SelectedStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which should be selected by default\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        this.wizardStep.defaultSelected = true;\n    }\n}\nSelectedStepDirective.ɵfac = function SelectedStepDirective_Factory(t) { return new (t || SelectedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nSelectedStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SelectedStepDirective, selectors: [[\"\", \"awSelectedStep\", \"\"]] });\nSelectedStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectedStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awSelectedStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, null); })();\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardCompletionStepDirective extends WizardCompletionStep {\n}\nWizardCompletionStepDirective.ɵfac = /*@__PURE__*/ function () { let ɵWizardCompletionStepDirective_BaseFactory; return function WizardCompletionStepDirective_Factory(t) { return (ɵWizardCompletionStepDirective_BaseFactory || (ɵWizardCompletionStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardCompletionStepDirective)))(t || WizardCompletionStepDirective); }; }();\nWizardCompletionStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardCompletionStepDirective, selectors: [[\"\", \"awWizardCompletionStep\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n            { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardCompletionStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awWizardCompletionStep]',\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective) },\n                    { provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\nclass WizardStepDirective extends WizardStep {\n}\nWizardStepDirective.ɵfac = /*@__PURE__*/ function () { let ɵWizardStepDirective_BaseFactory; return function WizardStepDirective_Factory(t) { return (ɵWizardStepDirective_BaseFactory || (ɵWizardStepDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(WizardStepDirective)))(t || WizardStepDirective); }; }();\nWizardStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: WizardStepDirective, selectors: [[\"\", \"awWizardStep\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WizardStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awWizardStep]',\n                providers: [\n                    { provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective) }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\nclass NavigationModeDirective {\n    constructor(wizard) {\n        this.wizard = wizard;\n    }\n    ngOnChanges(changes) {\n        this.wizard.navigation = this.getNavigationMode();\n    }\n    getNavigationMode() {\n        if (this.awNavigationMode) {\n            return this.awNavigationMode;\n        }\n        return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n    }\n}\nNavigationModeDirective.ɵfac = function NavigationModeDirective_Factory(t) { return new (t || NavigationModeDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };\nNavigationModeDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NavigationModeDirective, selectors: [[\"\", \"awNavigationMode\", \"\"]], inputs: { awNavigationMode: \"awNavigationMode\", navigateBackward: \"navigateBackward\", navigateForward: \"navigateForward\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nNavigationModeDirective.ctorParameters = () => [\n    { type: WizardComponent }\n];\nNavigationModeDirective.propDecorators = {\n    awNavigationMode: [{ type: Input }],\n    navigateBackward: [{ type: Input }],\n    navigateForward: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationModeDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awNavigationMode]'\n            }]\n    }], function () { return [{ type: WizardComponent }]; }, { awNavigationMode: [{\n            type: Input\n        }], navigateBackward: [{\n            type: Input\n        }], navigateForward: [{\n            type: Input\n        }] }); })();\n\n/**\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\n *\n * Initially completed steps are shown as completed when the wizard is presented to the user.\n *\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awCompletedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * An optional boolean condition can be specified:\n *\n * ```html\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\n *     ...\n * </aw-wizard-step>\n * ```\n */\nclass CompletedStepDirective {\n    /**\n     * Constructor\n     *\n     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\n     */\n    constructor(wizardStep) {\n        this.wizardStep = wizardStep;\n        // tslint:disable-next-line:no-input-rename\n        this.initiallyCompleted = true;\n    }\n    /**\n     * Initialization work\n     */\n    ngOnInit() {\n        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\n        this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted === '';\n    }\n}\nCompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };\nCompletedStepDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [[\"\", \"awCompletedStep\", \"\"]], inputs: { initiallyCompleted: [\"awCompletedStep\", \"initiallyCompleted\"] } });\nCompletedStepDirective.ctorParameters = () => [\n    { type: WizardStep, decorators: [{ type: Host }] }\n];\nCompletedStepDirective.propDecorators = {\n    initiallyCompleted: [{ type: Input, args: ['awCompletedStep',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[awCompletedStep]'\n            }]\n    }], function () { return [{ type: WizardStep, decorators: [{\n                type: Host\n            }] }]; }, { initiallyCompleted: [{\n            type: Input,\n            args: ['awCompletedStep']\n        }] }); })();\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\nclass ArchwizardModule {\n    /* istanbul ignore next */\n    static forRoot() {\n        return {\n            ngModule: ArchwizardModule,\n            providers: [\n            // Nothing here yet\n            ]\n        };\n    }\n}\nArchwizardModule.ɵfac = function ArchwizardModule_Factory(t) { return new (t || ArchwizardModule)(); };\nArchwizardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ArchwizardModule });\nArchwizardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ArchwizardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    WizardComponent,\n                    WizardStepComponent,\n                    WizardNavigationBarComponent,\n                    WizardCompletionStepComponent,\n                    GoToStepDirective,\n                    NextStepDirective,\n                    PreviousStepDirective,\n                    OptionalStepDirective,\n                    WizardStepSymbolDirective,\n                    WizardStepTitleDirective,\n                    EnableBackLinksDirective,\n                    WizardStepDirective,\n                    WizardCompletionStepDirective,\n                    SelectedStepDirective,\n                    ResetWizardDirective,\n                    NavigationModeDirective,\n                    CompletedStepDirective,\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    WizardComponent,\n                    WizardStepComponent,\n                    WizardNavigationBarComponent,\n                    WizardCompletionStepComponent,\n                    GoToStepDirective,\n                    NextStepDirective,\n                    PreviousStepDirective,\n                    OptionalStepDirective,\n                    WizardStepSymbolDirective,\n                    WizardStepTitleDirective,\n                    EnableBackLinksDirective,\n                    WizardStepDirective,\n                    WizardCompletionStepDirective,\n                    SelectedStepDirective,\n                    ResetWizardDirective,\n                    NavigationModeDirective,\n                    CompletedStepDirective,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ArchwizardModule, { declarations: function () { return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [WizardComponent, WizardStepComponent, WizardNavigationBarComponent, WizardCompletionStepComponent, GoToStepDirective, NextStepDirective, PreviousStepDirective, OptionalStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, EnableBackLinksDirective, WizardStepDirective, WizardCompletionStepDirective, SelectedStepDirective, ResetWizardDirective, NavigationModeDirective, CompletedStepDirective]; } }); })();\n\n// export the components\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchwizardModule, BaseNavigationMode, CompletedStepDirective, ConfigurableNavigationMode, EnableBackLinksDirective, GoToStepDirective, MovingDirection, NavigationModeDirective, NextStepDirective, OptionalStepDirective, PreviousStepDirective, ResetWizardDirective, SelectedStepDirective, WizardCompletionStep, WizardCompletionStepComponent, WizardCompletionStepDirective, WizardComponent, WizardNavigationBarComponent, WizardStep, WizardStepComponent, WizardStepDirective, WizardStepSymbolDirective, WizardStepTitleDirective, isStepId, isStepIndex, isStepOffset };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}