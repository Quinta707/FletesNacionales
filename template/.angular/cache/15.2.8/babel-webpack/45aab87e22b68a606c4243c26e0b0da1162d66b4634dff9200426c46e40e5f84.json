{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n  return function (source) {\n    return source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n  };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = function () {\n  function SwitchMapToOperator(observable, resultSelector) {\n    this.observable = observable;\n    this.resultSelector = resultSelector;\n  }\n  SwitchMapToOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  };\n  return SwitchMapToOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = function (_super) {\n  __extends(SwitchMapToSubscriber, _super);\n  function SwitchMapToSubscriber(destination, inner, resultSelector) {\n    _super.call(this, destination);\n    this.inner = inner;\n    this.resultSelector = resultSelector;\n    this.index = 0;\n  }\n  SwitchMapToSubscriber.prototype._next = function (value) {\n    var innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n  };\n  SwitchMapToSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  /** @deprecated internal use only */\n  SwitchMapToSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = null;\n  };\n  SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n      resultSelector = _a.resultSelector,\n      destination = _a.destination;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  };\n  SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var _a = this,\n      resultSelector = _a.resultSelector,\n      destination = _a.destination;\n    var result;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    destination.next(result);\n  };\n  return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","switchMapTo","innerObservable","resultSelector","source","lift","SwitchMapToOperator","exports","observable","call","subscriber","subscribe","SwitchMapToSubscriber","_super","destination","inner","index","_next","value","innerSubscription","unsubscribe","add","subscribeToResult","_complete","closed","_unsubscribe","notifyComplete","innerSub","remove","isStopped","notifyNext","outerValue","innerValue","outerIndex","innerIndex","_a","tryResultSelector","next","result","err","error","OuterSubscriber"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/switchMapTo.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}