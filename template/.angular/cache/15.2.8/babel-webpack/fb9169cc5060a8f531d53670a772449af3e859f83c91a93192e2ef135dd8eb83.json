{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = function (_super) {\n  __extends(TimerObservable, _super);\n  function TimerObservable(dueTime, period, scheduler) {\n    if (dueTime === void 0) {\n      dueTime = 0;\n    }\n    _super.call(this);\n    this.period = -1;\n    this.dueTime = 0;\n    if (isNumeric_1.isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler_1.isScheduler(period)) {\n      scheduler = period;\n    }\n    if (!isScheduler_1.isScheduler(scheduler)) {\n      scheduler = async_1.async;\n    }\n    this.scheduler = scheduler;\n    this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;\n  }\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  TimerObservable.create = function (initialDelay, period, scheduler) {\n    if (initialDelay === void 0) {\n      initialDelay = 0;\n    }\n    return new TimerObservable(initialDelay, period, scheduler);\n  };\n  TimerObservable.dispatch = function (state) {\n    var index = state.index,\n      period = state.period,\n      subscriber = state.subscriber;\n    var action = this;\n    subscriber.next(index);\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n    state.index = index + 1;\n    action.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n  TimerObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var _a = this,\n      period = _a.period,\n      dueTime = _a.dueTime,\n      scheduler = _a.scheduler;\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index: index,\n      period: period,\n      subscriber: subscriber\n    });\n  };\n  return TimerObservable;\n}(Observable_1.Observable);\nexports.TimerObservable = TimerObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isNumeric_1","require","Observable_1","async_1","isScheduler_1","isDate_1","TimerObservable","_super","dueTime","period","scheduler","call","isNumeric","Number","isScheduler","async","isDate","now","initialDelay","dispatch","state","index","subscriber","action","next","closed","complete","schedule","_subscribe","_a","Observable","exports"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/observable/TimerObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}