{"ast":null,"code":"\"use strict\";\n\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n  return selector ? multicast_1.multicast(function () {\n    return new Subject_1.Subject();\n  }, selector) : multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;","map":{"version":3,"names":["Subject_1","require","multicast_1","publish","selector","multicast","Subject","exports"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/publish.js"],"sourcesContent":["\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,IAAIC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,OAAO,CAACC,QAAQ,EAAE;EACvB,OAAOA,QAAQ,GACXF,WAAW,CAACG,SAAS,CAAC,YAAY;IAAE,OAAO,IAAIL,SAAS,CAACM,OAAO,EAAE;EAAE,CAAC,EAAEF,QAAQ,CAAC,GAChFF,WAAW,CAACG,SAAS,CAAC,IAAIL,SAAS,CAACM,OAAO,EAAE,CAAC;AACtD;AACAC,OAAO,CAACJ,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}