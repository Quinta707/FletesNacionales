{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ChatDB } from '../../shared/data/chat/chat';\nimport * as i0 from \"@angular/core\";\nvar today = new Date().toLocaleString('en-US', {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: true\n});\nexport class ChatService {\n  constructor() {\n    this.chat = [];\n    this.users = [];\n    this.chat = ChatDB.chat;\n    this.users = ChatDB.chatUser;\n  }\n  // Get User Data\n  getUsers() {\n    const users = new Observable(observer => {\n      observer.next(this.users);\n      observer.complete();\n    });\n    return users;\n  }\n  // Get cuurent user\n  getCurrentUser() {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.authenticate === 0;\n      });\n    }));\n  }\n  // chat to user\n  chatToUser(id) {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.id === id;\n      });\n    }));\n  }\n  // Get users chat\n  getUserChat() {\n    const chat = new Observable(observer => {\n      observer.next(this.chat);\n      observer.complete();\n    });\n    return chat;\n  }\n  // Get chat History\n  getChatHistory(id) {\n    return this.getUserChat().pipe(map(users => {\n      return users.find(item => {\n        return item.id === id;\n      });\n    }));\n  }\n  // Send Message to user\n  sendMessage(chat) {\n    this.chat.filter(chats => {\n      if (chats.id == chat.receiver) {\n        chats.message.push({\n          sender: chat.sender,\n          time: today.toLowerCase(),\n          text: chat.message\n        });\n        setTimeout(function () {\n          document.querySelector(\".chat-history\").scrollBy({\n            top: 200,\n            behavior: 'smooth'\n          });\n        }, 310);\n        this.responseMessage(chat);\n      }\n    });\n  }\n  responseMessage(chat) {\n    this.chat.filter(chats => {\n      if (chats.id == chat.receiver) {\n        setTimeout(() => {\n          chats.message.push({\n            sender: chat.receiver,\n            time: today.toLowerCase(),\n            text: 'Hey This is ' + chat.receiver_name + ', Sorry I busy right now, I will text you later'\n          });\n        }, 2000);\n        setTimeout(function () {\n          document.querySelector(\".chat-history\").scrollBy({\n            top: 200,\n            behavior: 'smooth'\n          });\n        }, 2310);\n      }\n    });\n  }\n}\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)();\n};\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","map","ChatDB","today","Date","toLocaleString","hour","minute","hour12","ChatService","constructor","chat","users","chatUser","getUsers","observer","next","complete","getCurrentUser","pipe","find","item","authenticate","chatToUser","id","getUserChat","getChatHistory","sendMessage","filter","chats","receiver","message","push","sender","time","toLowerCase","text","setTimeout","document","querySelector","scrollBy","top","behavior","responseMessage","receiver_name","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Sarai Quintanilla\\Documents\\GitHub\\FletesNacionales\\template\\src\\app\\shared\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subscriber } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ChatDB } from '../../shared/data/chat/chat';\r\nimport { chat, ChatUsers } from '../model/chat.model';\r\n\r\nvar today = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n\r\n  public observer: Subscriber<{}>;\r\n  public chat: any[] = []\r\n  public users: any[] = []\r\n\r\n  constructor() {\r\n    this.chat = ChatDB.chat\r\n    this.users = ChatDB.chatUser\r\n  }\r\n\r\n  // Get User Data\r\n  public getUsers(): Observable<ChatUsers[]> {\r\n    const users = new Observable(observer => {\r\n      observer.next(this.users);\r\n      observer.complete();\r\n    });\r\n    return <Observable<ChatUsers[]>>users;\r\n  }\r\n\r\n  // Get cuurent user\r\n  public getCurrentUser() {\r\n    return this.getUsers().pipe(map(users => {\r\n      return users.find((item) => {\r\n        return item.authenticate === 0;\r\n      });\r\n    }));\r\n  }\r\n\r\n  // chat to user\r\n  public chatToUser(id: number) {\r\n    return this.getUsers().pipe(map(users => {\r\n      return users.find((item) => {\r\n        return item.id === id;\r\n      });\r\n    }));\r\n  }\r\n\r\n  // Get users chat\r\n  public getUserChat(): Observable<chat[]> {\r\n    const chat = new Observable(observer => {\r\n      observer.next(this.chat);\r\n      observer.complete();\r\n    });\r\n    return <Observable<chat[]>>chat;\r\n  }\r\n\r\n  // Get chat History\r\n  public getChatHistory(id: number) {\r\n    return this.getUserChat().pipe(map(users => {\r\n      return users.find((item) => {\r\n        return item.id === id;\r\n      });\r\n    }));\r\n  }\r\n\r\n  // Send Message to user\r\n  public sendMessage(chat) {\r\n    this.chat.filter(chats => {\r\n      if (chats.id == chat.receiver) {\r\n        chats.message.push({ sender: chat.sender, time: today.toLowerCase(), text: chat.message })\r\n        setTimeout(function () {\r\n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\r\n        }, 310)\r\n        this.responseMessage(chat)\r\n      }\r\n    })\r\n  }\r\n\r\n  public responseMessage(chat) {\r\n\r\n    this.chat.filter(chats => {\r\n      if (chats.id == chat.receiver) {\r\n        setTimeout(() => {\r\n          chats.message.push({ sender: chat.receiver, time: today.toLowerCase(), text: 'Hey This is ' + chat.receiver_name + ', Sorry I busy right now, I will text you later' })\r\n        }, 2000);\r\n        setTimeout(function () {\r\n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\r\n        }, 2310)\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}