{"ast":null,"code":"/* eslint-disable @typescript-eslint/adjacent-overload-signatures */\nimport { PipeTransform } from '@angular/core';\nimport { BehaviorSubject, of, Subject } from 'rxjs';\nimport { DecimalPipe } from '@angular/common';\nimport { debounceTime, delay, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst compare = (v1, v2) => v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\nfunction sort(tableItem, column, direction) {\n  if (direction === '' || column === '') {\n    return tableItem;\n  } else {\n    return [...tableItem].sort((a, b) => {\n      const res = compare(a[column], b[column]);\n      return direction === 'asc' ? res : -res;\n    });\n  }\n}\nfunction matches(table, term, pipe) {\n  return table.name.toLowerCase().includes(term.toLowerCase()) || pipe.transform(table.invoice).includes(term);\n}\nexport class TableService {\n  constructor(pipe) {\n    this.pipe = pipe;\n    this._loading$ = new BehaviorSubject(true);\n    this._search$ = new Subject();\n    this._tableItem$ = new BehaviorSubject([]);\n    this._total$ = new BehaviorSubject(0);\n    this._state = {\n      page: 1,\n      pageSize: 4,\n      searchTerm: '',\n      sortColumn: '',\n      sortDirection: ''\n    };\n    this._search$.pipe(tap(() => this._loading$.next(true)), debounceTime(200), switchMap(() => this._search()), delay(200), tap(() => this._loading$.next(false))).subscribe(result => {\n      this._tableItem$.next(result.tableItem);\n      this._total$.next(result.total);\n    });\n    this._search$.next();\n  }\n  get tableItem$() {\n    return this._tableItem$.asObservable();\n  }\n  get total$() {\n    return this._total$.asObservable();\n  }\n  get loading$() {\n    return this._loading$.asObservable();\n  }\n  get page() {\n    return this._state.page;\n  }\n  get pageSize() {\n    return this._state.pageSize;\n  }\n  get searchTerm() {\n    return this._state.searchTerm;\n  }\n  set page(page) {\n    this._set({\n      page\n    });\n  }\n  set pageSize(pageSize) {\n    this._set({\n      pageSize\n    });\n  }\n  set searchTerm(searchTerm) {\n    this._set({\n      searchTerm\n    });\n  }\n  set sortColumn(sortColumn) {\n    this._set({\n      sortColumn\n    });\n  }\n  set sortDirection(sortDirection) {\n    this._set({\n      sortDirection\n    });\n  }\n  setUserData(val) {\n    this.userData = val;\n  }\n  deleteSingleData(name) {\n    const tableItem = this.userData;\n    const total = tableItem.length;\n    tableItem.map(item => {\n      if (name === item.name) {\n        this.userData.splice(name, 1);\n      }\n    });\n    return this._tableItem$.next(tableItem), this._total$.next(total);\n  }\n  _set(patch) {\n    Object.assign(this._state, patch);\n    this._search$.next();\n  }\n  _search() {\n    const {\n      sortColumn,\n      sortDirection,\n      pageSize,\n      page,\n      searchTerm\n    } = this._state;\n    // 1. sort\n    let tableItem = sort(this.userData, sortColumn, sortDirection);\n    // 2. filter\n    const total = tableItem.length;\n    tableItem = tableItem.filter(country => matches(country, searchTerm, this.pipe));\n    tableItem = tableItem.map((item, i) => Object.assign({\n      id: i + 1\n    }, item)).slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n    return of({\n      tableItem,\n      total\n    });\n  }\n}\nTableService.ɵfac = function TableService_Factory(t) {\n  return new (t || TableService)(i0.ɵɵinject(i1.DecimalPipe));\n};\nTableService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TableService,\n  factory: TableService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["PipeTransform","BehaviorSubject","of","Subject","DecimalPipe","debounceTime","delay","switchMap","tap","compare","v1","v2","sort","tableItem","column","direction","a","b","res","matches","table","term","pipe","name","toLowerCase","includes","transform","invoice","TableService","constructor","page","pageSize","searchTerm","sortColumn","sortDirection","_search$","_loading$","next","_search","subscribe","result","_tableItem$","_total$","total","tableItem$","asObservable","total$","loading$","_state","_set","setUserData","val","userData","deleteSingleData","length","map","item","splice","patch","Object","assign","filter","country","i","id","slice","factory","providedIn"],"sourceRoot":"","sources":["F:\\Plantillas\\template\\src\\app\\shared\\services\\table.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/adjacent-overload-signatures */\r\n    import { Injectable, PipeTransform } from '@angular/core';\r\n\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\n\r\nimport { DecimalPipe, SlicePipe } from '@angular/common';\r\nimport { debounceTime, delay, map, switchMap, tap } from 'rxjs/operators';\r\nimport { SortColumn, SortDirection } from '../directives/NgbdSortableHeader';\r\nimport { CompanyDB } from '../data/tables/company';\r\n\r\ninterface SearchResult {\r\n    tableItem: any[];\r\n    total: number;\r\n}\r\n\r\ninterface State {\r\n    page: number;\r\n    pageSize: number;\r\n    searchTerm: string;\r\n    sortColumn: SortColumn;\r\n    sortDirection: SortDirection;\r\n}\r\n\r\nconst compare = (v1: string | number, v2: string | number) => v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\r\n\r\nfunction sort(tableItem: CompanyDB[], column: SortColumn, direction: string): CompanyDB[] {\r\n    if (direction === '' || column === '') {\r\n        return tableItem;\r\n    } else {\r\n        return [...tableItem].sort((a, b) => {\r\n            const res = compare(a[column], b[column]);\r\n            return direction === 'asc' ? res : -res;\r\n        });\r\n    }\r\n}\r\n\r\nfunction matches(table: CompanyDB, term: string, pipe: PipeTransform) {\r\n    return table.name.toLowerCase().includes(term.toLowerCase())\r\n    || pipe.transform(table.invoice).includes(term)\r\n  \r\n  }\r\n@Injectable({ providedIn: 'root' })\r\nexport class TableService {\r\n    private _loading$ = new BehaviorSubject<boolean>(true);\r\n    private _search$ = new Subject<void>();\r\n    private _tableItem$ = new BehaviorSubject<any[]>([]);\r\n    private _total$ = new BehaviorSubject<number>(0);\r\n\r\n    userData;\r\n\r\n    private _state: State = {\r\n        page: 1,\r\n        pageSize: 4,\r\n        searchTerm: '',\r\n        sortColumn: '',\r\n        sortDirection: ''\r\n    };\r\n\r\n    constructor(private pipe: DecimalPipe) {\r\n        this._search$.pipe(\r\n            tap(() => this._loading$.next(true)),\r\n            debounceTime(200),\r\n            switchMap(() => this._search()),\r\n            delay(200),\r\n            tap(() => this._loading$.next(false))\r\n        ).subscribe(result => {\r\n            this._tableItem$.next(result.tableItem);\r\n            this._total$.next(result.total);\r\n        });\r\n\r\n        this._search$.next();\r\n    }\r\n\r\n    get tableItem$() { return this._tableItem$.asObservable(); }\r\n    get total$() { return this._total$.asObservable(); }\r\n    get loading$() { return this._loading$.asObservable(); }\r\n    get page() { return this._state.page; }\r\n    get pageSize() { return this._state.pageSize; }\r\n    get searchTerm() { return this._state.searchTerm; }\r\n\r\n    set page(page: number) {\r\n        this._set({ page });\r\n    }\r\n    set pageSize(pageSize: number) { this._set({ pageSize }); }\r\n    set searchTerm(searchTerm: string) { this._set({ searchTerm }); }\r\n    set sortColumn(sortColumn: SortColumn) { this._set({ sortColumn }); }\r\n    set sortDirection(sortDirection: SortDirection) { this._set({ sortDirection }); }\r\n\r\n    setUserData(val: object) {\r\n        this.userData = val;\r\n    }\r\n\r\n    deleteSingleData(name: string) {\r\n        const tableItem = this.userData;  \r\n        const total = tableItem.length;\r\n        \r\n        tableItem.map(item => {\r\n                if(name === item.name){\r\n                    this.userData.splice(name,1);\r\n                }\r\n            })\r\n\r\n        return (\r\n            this._tableItem$.next(tableItem),\r\n            this._total$.next(total)\r\n        )\r\n\r\n    }\r\n\r\n\r\n    private _set(patch: Partial<State>) {\r\n        Object.assign(this._state, patch);\r\n        this._search$.next();\r\n    }\r\n\r\n    private _search(): Observable<SearchResult> {\r\n        const { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;\r\n\r\n        // 1. sort\r\n        let tableItem = sort(this.userData, sortColumn, sortDirection);\r\n\r\n        // 2. filter\r\n        const total = tableItem.length;\r\n        tableItem = tableItem.filter(country => matches(country, searchTerm, this.pipe));\r\n        \r\n        tableItem = tableItem\r\n            .map((item, i) => ({ id: i + 1, ...item }))\r\n            .slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\r\n        return of({ tableItem, total });\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}