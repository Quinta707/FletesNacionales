{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparor));\n  };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = function () {\n  function SequenceEqualOperator(compareTo, comparor) {\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n  }\n  SequenceEqualOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  };\n  return SequenceEqualOperator;\n}();\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = function (_super) {\n  __extends(SequenceEqualSubscriber, _super);\n  function SequenceEqualSubscriber(destination, compareTo, comparor) {\n    _super.call(this, destination);\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n    this._a = [];\n    this._b = [];\n    this._oneComplete = false;\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n  SequenceEqualSubscriber.prototype._next = function (value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  };\n  SequenceEqualSubscriber.prototype._complete = function () {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  };\n  SequenceEqualSubscriber.prototype.checkValues = function () {\n    var _c = this,\n      _a = _c._a,\n      _b = _c._b,\n      comparor = _c.comparor;\n    while (_a.length > 0 && _b.length > 0) {\n      var a = _a.shift();\n      var b = _b.shift();\n      var areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n        if (areEqual === errorObject_1.errorObject) {\n          this.destination.error(errorObject_1.errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  };\n  SequenceEqualSubscriber.prototype.emit = function (value) {\n    var destination = this.destination;\n    destination.next(value);\n    destination.complete();\n  };\n  SequenceEqualSubscriber.prototype.nextB = function (value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  };\n  return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber);\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = function (_super) {\n  __extends(SequenceEqualCompareToSubscriber, _super);\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    _super.call(this, destination);\n    this.parent = parent;\n  }\n  SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n    this.parent.nextB(value);\n  };\n  SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n    this.parent.error(err);\n  };\n  SequenceEqualCompareToSubscriber.prototype._complete = function () {\n    this.parent._complete();\n  };\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","tryCatch_1","errorObject_1","sequenceEqual","compareTo","comparor","source","lift","SequenceEqualOperator","exports","call","subscriber","subscribe","SequenceEqualSubscriber","_super","destination","_a","_b","_oneComplete","add","SequenceEqualCompareToSubscriber","_next","value","length","emit","push","checkValues","_complete","_c","a","shift","areEqual","tryCatch","errorObject","error","e","next","complete","nextB","Subscriber","parent","_error","err"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/sequenceEqual.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}