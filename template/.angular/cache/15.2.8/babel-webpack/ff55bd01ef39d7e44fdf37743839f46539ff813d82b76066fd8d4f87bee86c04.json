{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n  return BufferWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = function (_super) {\n  __extends(BufferWhenSubscriber, _super);\n  function BufferWhenSubscriber(destination, closingSelector) {\n    _super.call(this, destination);\n    this.closingSelector = closingSelector;\n    this.subscribing = false;\n    this.openBuffer();\n  }\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = null;\n    this.subscribing = false;\n  };\n  BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openBuffer();\n  };\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n    var buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n    this.buffer = [];\n    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject_1.errorObject) {\n      this.error(errorObject_1.errorObject.e);\n    } else {\n      closingSubscription = new Subscription_1.Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  };\n  return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscription_1","require","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","bufferWhen","closingSelector","source","lift","BufferWhenOperator","exports","call","subscriber","subscribe","BufferWhenSubscriber","_super","destination","subscribing","openBuffer","_next","value","buffer","push","_complete","next","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","complete","closingSubscription","remove","unsubscribe","closingNotifier","tryCatch","errorObject","error","e","Subscription","add","subscribeToResult","OuterSubscriber"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/bufferWhen.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}