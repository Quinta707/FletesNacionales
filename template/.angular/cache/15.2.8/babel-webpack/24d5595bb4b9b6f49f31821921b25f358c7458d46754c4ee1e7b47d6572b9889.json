{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = function (_super) {\n  __extends(IntervalObservable, _super);\n  function IntervalObservable(period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n    _super.call(this);\n    this.period = period;\n    this.scheduler = scheduler;\n    if (!isNumeric_1.isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async_1.async;\n    }\n  }\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  IntervalObservable.create = function (period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n    return new IntervalObservable(period, scheduler);\n  };\n  IntervalObservable.dispatch = function (state) {\n    var index = state.index,\n      subscriber = state.subscriber,\n      period = state.period;\n    subscriber.next(index);\n    if (subscriber.closed) {\n      return;\n    }\n    state.index += 1;\n    this.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n  IntervalObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var period = this.period;\n    var scheduler = this.scheduler;\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index: index,\n      subscriber: subscriber,\n      period: period\n    }));\n  };\n  return IntervalObservable;\n}(Observable_1.Observable);\nexports.IntervalObservable = IntervalObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isNumeric_1","require","Observable_1","async_1","IntervalObservable","_super","period","scheduler","async","call","isNumeric","schedule","dispatch","state","index","subscriber","next","closed","_subscribe","add","Observable","exports"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/observable/IntervalObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}