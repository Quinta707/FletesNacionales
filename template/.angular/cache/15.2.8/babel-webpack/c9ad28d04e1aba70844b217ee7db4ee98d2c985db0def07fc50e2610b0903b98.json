{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\nexports.distinct = distinct;\nvar DistinctOperator = function () {\n  function DistinctOperator(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n  DistinctOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  };\n  return DistinctOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = function (_super) {\n  __extends(DistinctSubscriber, _super);\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    _super.call(this, destination);\n    this.keySelector = keySelector;\n    this.values = new Set_1.Set();\n    if (flushes) {\n      this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n    }\n  }\n  DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values.clear();\n  };\n  DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n  DistinctSubscriber.prototype._next = function (value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  };\n  DistinctSubscriber.prototype._useKeySelector = function (value) {\n    var key;\n    var destination = this.destination;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  };\n  DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n    var values = this.values;\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  };\n  return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\nexports.DistinctSubscriber = DistinctSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","Set_1","distinct","keySelector","flushes","source","lift","DistinctOperator","exports","call","subscriber","subscribe","DistinctSubscriber","_super","destination","values","Set","add","subscribeToResult","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","clear","notifyError","error","_error","_next","value","_useKeySelector","_finalizeNext","key","err","has","next","OuterSubscriber"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/distinct.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}