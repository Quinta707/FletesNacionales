{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n  return function (source) {\n    return source.lift(new SampleOperator(notifier));\n  };\n}\nexports.sample = sample;\nvar SampleOperator = function () {\n  function SampleOperator(notifier) {\n    this.notifier = notifier;\n  }\n  SampleOperator.prototype.call = function (subscriber, source) {\n    var sampleSubscriber = new SampleSubscriber(subscriber);\n    var subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  };\n  return SampleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = function (_super) {\n  __extends(SampleSubscriber, _super);\n  function SampleSubscriber() {\n    _super.apply(this, arguments);\n    this.hasValue = false;\n  }\n  SampleSubscriber.prototype._next = function (value) {\n    this.value = value;\n    this.hasValue = true;\n  };\n  SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.emitValue();\n  };\n  SampleSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n  SampleSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  };\n  return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","sample","notifier","source","lift","SampleOperator","exports","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","subscribeToResult","_super","apply","arguments","hasValue","_next","value","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","emitValue","notifyComplete","destination","next","OuterSubscriber"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/operators/sample.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}