{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = function (_super) {\n  __extends(BoundNodeCallbackObservable, _super);\n  function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n    _super.call(this);\n    this.callbackFunc = callbackFunc;\n    this.selector = selector;\n    this.args = args;\n    this.context = context;\n    this.scheduler = scheduler;\n  }\n  /* tslint:enable:max-line-length */\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n    if (selector === void 0) {\n      selector = undefined;\n    }\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n      }\n      return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n    };\n  };\n  /** @deprecated internal use only */\n  BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n    var callbackFunc = this.callbackFunc;\n    var args = this.args;\n    var scheduler = this.scheduler;\n    var subject = this.subject;\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n          var innerArgs = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            innerArgs[_i - 0] = arguments[_i];\n          }\n          var source = handlerFn.source;\n          var selector = source.selector,\n            subject = source.subject;\n          var err = innerArgs.shift();\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n            if (result_1 === errorObject_1.errorObject) {\n              subject.error(errorObject_1.errorObject.e);\n            } else {\n              subject.next(result_1);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        handler.source = this;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n          subject.error(errorObject_1.errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, {\n        source: this,\n        subscriber: subscriber,\n        context: this.context\n      });\n    }\n  };\n  return BoundNodeCallbackObservable;\n}(Observable_1.Observable);\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n  var self = this;\n  var source = state.source,\n    subscriber = state.subscriber,\n    context = state.context;\n  // XXX: cast to `any` to access to the private field in `source`.\n  var _a = source,\n    callbackFunc = _a.callbackFunc,\n    args = _a.args,\n    scheduler = _a.scheduler;\n  var subject = source.subject;\n  if (!subject) {\n    subject = source.subject = new AsyncSubject_1.AsyncSubject();\n    var handler = function handlerFn() {\n      var innerArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i - 0] = arguments[_i];\n      }\n      var source = handlerFn.source;\n      var selector = source.selector,\n        subject = source.subject;\n      var err = innerArgs.shift();\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else if (selector) {\n        var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n        if (result_2 === errorObject_1.errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, {\n            err: errorObject_1.errorObject.e,\n            subject: subject\n          }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, {\n            value: result_2,\n            subject: subject\n          }));\n        }\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    };\n    // use named function to pass values in without closure\n    handler.source = source;\n    var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject_1.errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, {\n        err: errorObject_1.errorObject.e,\n        subject: subject\n      }));\n    }\n  }\n  self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n  var value = arg.value,\n    subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\nfunction dispatchError(arg) {\n  var err = arg.err,\n    subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundNodeCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","func","undefined","_i","arguments","length","_subscribe","subscriber","subject","AsyncSubject","handler","handlerFn","innerArgs","source","err","shift","error","result_1","tryCatch","apply","errorObject","e","next","complete","result","concat","subscribe","schedule","dispatch","Observable","exports","state","self","_a","add","dispatchError","result_2","dispatchNext","value","arg"],"sources":["F:/Plantillas/template/node_modules/ng5-slider/node_modules/rxjs/observable/BoundNodeCallbackObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACxD,KAAK,IAAIC,CAAC,IAAID,CAAC,EAAE,IAAIA,CAAC,CAACE,cAAc,CAACD,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,GAAGD,CAAC,CAACC,CAAC,CAAC;EACrD,SAASE,EAAE,GAAG;IAAE,IAAI,CAACC,WAAW,GAAGL,CAAC;EAAE;EACtCA,CAAC,CAACM,SAAS,GAAGL,CAAC,KAAK,IAAI,GAAGM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,IAAIG,EAAE,CAACE,SAAS,GAAGL,CAAC,CAACK,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;AACxF,CAAC;AACD,IAAIK,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC5C,IAAIE,aAAa,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAClD,IAAIG,cAAc,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,IAAII,2BAA2B,GAAI,UAAUC,MAAM,EAAE;EACjDhB,SAAS,CAACe,2BAA2B,EAAEC,MAAM,CAAC;EAC9C,SAASD,2BAA2B,CAACE,YAAY,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACnFL,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;IACjB,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIN,2BAA2B,CAACN,MAAM,GAAG,UAAUc,IAAI,EAAEL,QAAQ,EAAEG,SAAS,EAAE;IACtE,IAAIH,QAAQ,KAAK,KAAK,CAAC,EAAE;MAAEA,QAAQ,GAAGM,SAAS;IAAE;IACjD,OAAO,YAAY;MACf,IAAIL,IAAI,GAAG,EAAE;MACb,KAAK,IAAIM,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC1CN,IAAI,CAACM,EAAE,GAAG,CAAC,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;MAChC;MACA,OAAO,IAAIV,2BAA2B,CAACQ,IAAI,EAAEL,QAAQ,EAAEC,IAAI,EAAE,IAAI,EAAEE,SAAS,CAAC;IACjF,CAAC;EACL,CAAC;EACD;EAAqCN,2BAA2B,CAACR,SAAS,CAACqB,UAAU,GAAG,UAAUC,UAAU,EAAE;IAC1G,IAAIZ,YAAY,GAAG,IAAI,CAACA,YAAY;IACpC,IAAIE,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIE,SAAS,GAAG,IAAI,CAACA,SAAS;IAC9B,IAAIS,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1B,IAAI,CAACT,SAAS,EAAE;MACZ,IAAI,CAACS,OAAO,EAAE;QACVA,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,IAAIhB,cAAc,CAACiB,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}